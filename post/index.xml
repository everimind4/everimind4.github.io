<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Alan Choi</title>
    <link>https://everimind4.github.io/post/</link>
    <description>Recent content in Posts on Alan Choi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://everimind4.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Limited Direct Execution</title>
      <link>https://everimind4.github.io/p/limited-direct-execution/</link>
      <pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://everimind4.github.io/p/limited-direct-execution/</guid>
      <description>Virtualization Mechanism 저번까지 다룬 CPU 가상화의 핵심은 Time Sharing이다.
Time Sharing은 여러 개의 프로세스가 CPU의 시간을 나누어 쓰는 기법을 말한다.
그렇다면 이러한 Time Sharing을 실제로 어떤 메커니즘으로 구현할 수 있을까? 지금부터는 이를 어떻게 구현했는지 살펴본다.
Time Sharing 구현 이슈는 다음과 같다.
 Performance : 가상화 구현 시 Context Switching 등의 오버헤드를 최소화해야 한다. Control : 운영체제가 CPU에 대한 제어권을 유지하며 프로세스를 효율적으로 동작시킬 수 있어야 한다.  Direct Execution 우선 성능 이슈를 해결하는 방법에 대해 알아본다.</description>
    </item>
    
    <item>
      <title>제어문 (2)</title>
      <link>https://everimind4.github.io/p/%EC%A0%9C%EC%96%B4%EB%AC%B8-2/</link>
      <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://everimind4.github.io/p/%EC%A0%9C%EC%96%B4%EB%AC%B8-2/</guid>
      <description>5. 함수 정의 def 함수명(인수 1, 인수 2, ...) : 명령 1 명령 2 . . . 명령 n return value 일부 요소들은 생략 가능하다.
 인수가 없다면 생략할 수 있다. 반환값이 필요 없으면 return을 생략할 수 있다.  기본값 지정 특정 인수에 기본값을 지정해줄 수도 있다. 매개변수 선언 시 매개변수 = 기본값의 형태로 작성한다.
def plus(a = 0, b = 0) : return a + b 함수 호출 시 해당 매개변수의 입력을 생략하면 자동으로 기본값으로 설정된다.</description>
    </item>
    
    <item>
      <title>프로세스 (2)</title>
      <link>https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-2/</link>
      <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-2/</guid>
      <description>PCB (Process Control Block) 운영체제도 하나의 프로그램이므로, 다양한 정보를 저장하기 위한 자료구조들을 갖고 있다.
그리고 프로세스 관리를 위해 프로세스 관련 정보들을 저장하고 있는 자료구조가 바로 PCB(Process Control Block)이다. 즉, 프로세스는 운영체제 내에서 프로세스의 정보들을 가지고 있는 자료구조로 표현될 수 있다. 따라서 PCB를 Process Descriptor라고 부르기도 한다.
PCB는 프로세스에 관련된 모든 정보들을 모두 저장하고 있다.
  CPU Register : 현재 프로세스가 CPU에서 돌아가고 있을 경우 현재 CPU의 상태는 Register의 값으로 정의될 수 있으므로 관련 값들을 저장</description>
    </item>
    
    <item>
      <title>프로세스 (1)</title>
      <link>https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/</link>
      <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/</guid>
      <description>Virtualization (가상화) 가상화는 실제 대상을 가상의 대상으로 바꾸는 것을 의미한다.
복숭아를 가상화해보자
실제로 존재하는 복숭아(Physical peach)는 하나이다. 그런데 여러 사용자가 이를 원하는 경우, 복숭아를 가상화하여 가상의 복숭아(Virtual peach)를 여러 개 만들 수 있다. 그리고 이것들을 복숭아를 원하는 사람들에게 나눠준다.
가상의 복숭아를 갖고 있는 사람들은 자기만 전용으로 사용하는 복숭아를 갖고 있다는 착각에 빠지는데, 그 이유는 다음과 같다.
 자기가 가지고 있는 가상의 복숭아만 알 수 있다. 다른 사람들이 존재한다는 사실도 모른다.</description>
    </item>
    
    <item>
      <title>운영체제 개요</title>
      <link>https://everimind4.github.io/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B0%9C%EC%9A%94/</link>
      <pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://everimind4.github.io/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B0%9C%EC%9A%94/</guid>
      <description>운영체제의 기능 운영체제는 프로그램이 잘 실행되도록 돕는 프로그램이다. 따라서 다음과 같은 기능들을 갖는다.
 프로그램을 실행하기 쉽도록 해 준다. 프로그램들이 메모리를 공유할 수 있도록 해 준다. 프로그램들이 외부 장치들과 정보를 주고받을 수 있도록 해 준다.  즉, 시스템이 올바르고 효율적으로 동작할 수 있도록 만드는 것이 OS의 역할이다.
여기서 잠깐 프로그램이 무엇인가에 대해 간단하게 짚고 넘어가자.
프로그램이란? 프로그램은 CPU가 수행하는 인스트럭션(Instruction, 명령어)들의 목록이라고 생각할 수 있다.
즉, 프로그램을 실행한다는 것은 인스트럭션을 수행하는 것이다.</description>
    </item>
    
    <item>
      <title>제어문 (1)</title>
      <link>https://everimind4.github.io/p/%EC%A0%9C%EC%96%B4%EB%AC%B8-1/</link>
      <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://everimind4.github.io/p/%EC%A0%9C%EC%96%B4%EB%AC%B8-1/</guid>
      <description>1. 들여쓰기(Indentation)  C에서는 코드 실행 단위인 블록을 구분하기 위해 중괄호{ }를 사용하고, 들여쓰기는 가독성을 증진시키는 데만 사용되는 개념이었다.
하지만 파이썬에서는 들여쓰기 수준으로 코드 블록을 구분한다.
 C/C++ Style if (조건문) { 명령1; 명령2; } Python Style if a &amp;gt; b: 명령1 명령2 C와 비교했을 때, Python의 문법적 차이는 다음와 같다.
 조건문을 괄호( )로 싸지 않고 콜론:을 조건문 뒤에 적는 것으로 간단하게 사용한다. 명령문의 끝에 세미콜론;을 적지 않는다. (적어도 상관은 없음) 코드 블록을 감싸는 중괄호{ }를 생략한다.</description>
    </item>
    
    <item>
      <title>데이터형과 데이터 구조 (3)</title>
      <link>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-3/</link>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-3/</guid>
      <description>7. 관련 함수들 len 리스트나 튜플 내의 요소 개수를 반환하는 함수이다.
&amp;gt;&amp;gt;&amp;gt; len([&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;]) 4 &amp;gt;&amp;gt;&amp;gt; len([2, 3, 5, 7, 11, 13]) 6 대상 요소가 무엇이든 전체 개수만 반환하므로, 2차원 이상의 리스트 혹은 튜플의 경우에는 다음과 같은 결과를 확인할 수 있다.
&amp;gt;&amp;gt;&amp;gt; fibonacci = [[1, 1, 2, 3, 5, 8], [13, 21, 34, 55, 89], [144, 233, 377, 610, 987]] &amp;gt;&amp;gt;&amp;gt; len(fibonacci) 3 &amp;gt;&amp;gt;&amp;gt; len(fibonacci[2]) 5 copy 리스트를 복제하는 (리스트) 메소드이다.</description>
    </item>
    
    <item>
      <title>데이터형과 데이터 구조 (2)</title>
      <link>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/</link>
      <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/</guid>
      <description>4. 데이터형 파이썬의 기본적인 데이터형은 다음과 같다.
   종류 예약어 상세 예시     정수 int 소수점이 없음 4, 2, 6   실수 float 소수점이 있음 3.14, 2.71   문자열(String) str 문자열의 나열 &#39;everimind4&#39;   부울(Boolean) bool 논리값을 저장 True, False    1. 숫자 숫자를 저장하기 위한 변수는 다른 언어들과 마찬가지로 2종류가 있다.
 정수형 : 정수 값을 저장, 소수점이 없다. 실수형 : 실수 값을 저장, 소수점이 있고, 부동소수형이라고도 한다.</description>
    </item>
    
    <item>
      <title>데이터형과 데이터 구조 (1)</title>
      <link>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/</link>
      <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/</guid>
      <description>1. 연산 1.1 기본 연산자 코딩을 조금이라도 공부해 본 사람은 알겠지만, 파이썬에서는 여타 수많은 프로그래밍 언어와 마찬가지로 다양한 연산자를 지원하고 있다.
    수학에서의 기호 파이썬에서의 기호     덧셈 + +   뺄셈 - -   곱셈 × *   나눗셈 ÷ /     주의할 점은, 자료형(정수형, 실수형, &amp;hellip;)에 따라 계산 방식이 조금씩 다를 수 있다는 것이다.  또, Python IDLE Shell에서는 파이썬 코드를 입력하면 실행 결과가 바로 출력되는 것을 볼 수 있다.</description>
    </item>
    
    <item>
      <title>시작하기</title>
      <link>https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
      <pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid>
      <description>교재 소개  파이썬을 공부하고자 좋은 교재가 없는지 찾아보다, 기초 문법도 학습할 수 있고 개인 프로젝트도 직접 만들어 볼 수 있는 교재를 발견하였다. 바로 게임으로 배우는 파이썬!   본 교재는 1부와 2부로 구성되어 있다.  1부에서는 파이썬의 기초 문법에 대해 학습 2부에서는 학습한 내용을 기초로 하여 직접 고전 게임을 만들어보는 프로젝트를 진행   따라서 해당 교재를 공부한 내용과 프로젝트를 수행한 결과물을 본 블로그 및 Github Repository에 업로드 할 예정이다!</description>
    </item>
    
    <item>
      <title>휴고(Hugo)로 Github 블로그 만들기 (1)</title>
      <link>https://everimind4.github.io/p/%ED%9C%B4%EA%B3%A0hugo%EB%A1%9C-github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-1/</link>
      <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://everimind4.github.io/p/%ED%9C%B4%EA%B3%A0hugo%EB%A1%9C-github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-1/</guid>
      <description>1. Github 블로그  &amp;quot; 개발자라면 Github 블로그 하나 정도는 있어야지! &amp;quot;
 라는 말을 어디선가 주워듣고 Github로 블로그를 만들어보자, 결심하게 되었다.
그런데 생각보다 진입장벽이 낮지는 않았고, 익숙해지는 데 생각보다 시간이 걸린 데다 시행착오도 제법 겪으며 결국 어찌저찌 성공은 하였다(그 결과물을 지금 보고 계십니다).
그래서 관련 내용을 정리해서 포스팅하면 Hugo로 블로그를 만들어 Github로 호스팅하고자 하는 사람들이 조금이나마 도움을 받을 수 있을 듯 하여, 첫 포스팅 주제는 블로그를 만드는 방법으로 결정!</description>
    </item>
    
  </channel>
</rss>
