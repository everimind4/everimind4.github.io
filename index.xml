<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Alan Choi</title>
        <link>https://everimind4.github.io/</link>
        <description>Recent content on Alan Choi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 15 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://everimind4.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>데이터형과 데이터 구조</title>
        <link>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0/</link>
        <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0/</guid>
        <description>&lt;img src="https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0/cover.png" alt="Featured image of post 데이터형과 데이터 구조" /&gt;&lt;h2 id=&#34;1-연산&#34;&gt;1. 연산&lt;/h2&gt;
&lt;h4 id=&#34;11-기본-연산자&#34;&gt;1.1 기본 연산자&lt;/h4&gt;
&lt;p&gt;코딩을 조금이라도 공부해 본 사람은 알겠지만, 파이썬에서는 여타 수많은 프로그래밍 언어와 마찬가지로 다양한 연산자를 지원하고 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;수학에서의 기호&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;파이썬에서의 기호&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;덧셈&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;뺄셈&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;곱셈&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;나눗셈&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;÷&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;주의할 점은, 자료형(정수형, 실수형, &amp;hellip;)에 따라 계산 방식이 조금씩 다를 수 있다는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;또, Python IDLE Shell에서는 파이썬 코드를 입력하면 실행 결과가 바로 출력되는 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 362; flex-basis: 869px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0/capture01.PNG&#34; data-size=&#34;960x265&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0/capture01.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0/capture01_hu6142e893ab4f3b3035ffd2b56ef10dc1_10214_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0/capture01_hu6142e893ab4f3b3035ffd2b56ef10dc1_10214_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;960&#34;
				height=&#34;265&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Python IDLE Shell :: 사칙연산&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Python IDLE Shell :: 사칙연산&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;그리고 맨 아래 계산 &lt;code&gt;(4 * 2) / 6&lt;/code&gt;을 보면 알 수 있겠지만, 일반적인 수학적 표현에서와 마찬가지로 괄호&lt;code&gt;( )&lt;/code&gt;를 이용해 계산의 우선순위를 지정할 수 있다.&lt;/p&gt;
&lt;p&gt;사칙연산 이외에도 여러 가지 연산자를 사용할 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자 종류&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;기호&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;나눗셈의 나머지 구하기&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;나눗셈의 몫 구하기&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;//&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;지수(거듭제곱) 구하기&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;**&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 446; flex-basis: 1071px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0/capture02.PNG&#34; data-size=&#34;960x215&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0/capture02.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0/capture02_hucf88f40d78bd41d34a52d9fee90a0583_8994_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0/capture02_hucf88f40d78bd41d34a52d9fee90a0583_8994_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;960&#34;
				height=&#34;215&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Python IDLE Shell :: 몫/나머지, 지수 계산&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Python IDLE Shell :: 몫/나머지, 지수 계산&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일반적인 나눗셈이 아닌 정수 나눗셈의 경우 몫과 나머지를 각각 %, // 연산자를 사용하여 계산한다.&lt;/li&gt;
&lt;li&gt;파이썬에서는 거듭제곱을 계산할 때 ** 연산자를 사용하여 (밑) ** (지수) 형태로 나타낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;몫과 나머지를 한 번에 구하는 &lt;code&gt;divmod()&lt;/code&gt; 함수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;divmod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-변수&#34;&gt;2. 변수&lt;/h2&gt;
&lt;p&gt;프로그래밍에서 변수는 값을 저장하고, 저장된 값을 변경할 수 있다는 특징이 있다.&lt;/p&gt;
&lt;p&gt;파이썬의 변수 사용법도 다른 언어와 크게 다르지 않다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다른 언어들과 마찬가지로 변수명을 정할 때는 몇 가지 규칙이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;알파벳 대소문자, 숫자, 언더바(&lt;code&gt;_&lt;/code&gt;)만 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;숫자는 맨 앞에 올 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예약어(reserved word)는 변수명이 될 수 없다.&lt;/p&gt;
&lt;p&gt;ex. &lt;code&gt;if&lt;/code&gt; &lt;code&gt;for&lt;/code&gt; &lt;code&gt;return&lt;/code&gt; . . .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 예시를 보면 알 수 있듯, 예약어는 특정 프로그래밍 언어 문법에서 이미 용도가 지정된 단어를 말한다.&lt;/p&gt;
&lt;p&gt;그리고 이쯤에서 한 마디 덧붙이자면, 책을 그대로 옮기는 듯한, 그러니까 일종의 아카이빙을 하는 느낌이 들기 시작했다.&lt;/p&gt;
&lt;p&gt;그래서 지금부터는 &lt;strong&gt;새롭게 배우게 된 내용을 정리&lt;/strong&gt;하고, 이미 &lt;strong&gt;알고 있는 내용은 간단하게 요약&lt;/strong&gt;하고 넘어가는 식으로 공부하기로 했다. 다른 프로그래밍 언어를 배우는 과정에서 이미 학습한 내용을 굳이 또 정리할 필요는 없기도 하고, 무엇보다도 현재 방식대로 진행하면 &lt;strong&gt;진도가 너무 느리다&lt;/strong&gt;. 어쨌든 이제부터는 빠르게 진행해보기로 결정!&lt;/p&gt;
&lt;h2 id=&#34;3-함수&#34;&gt;3. 함수&lt;/h2&gt;
&lt;p&gt;지금까지 여러 연산자들을 살펴보았다.&lt;/p&gt;
&lt;p&gt;지금 살펴보는 &lt;strong&gt;함수&lt;/strong&gt;는 이런 연산자들과 또 다른 함수들을 결합하여 &lt;strong&gt;특정 기능을 수행&lt;/strong&gt;하도록 만든 것이다.&lt;/p&gt;
&lt;p&gt;다른 언어들과 마찬가지로, 파이썬의 함수도 &lt;strong&gt;함수명 뒤에 괄호 &lt;code&gt;( )&lt;/code&gt;를 붙여 실행&lt;/strong&gt;한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수명(인수1, 인수2, &amp;hellip; )
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;인수&lt;/strong&gt; : 함수에 전달되는 값&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;반환값&lt;/strong&gt; : 함수로부터 돌아오는 값&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어 각각 인수 2개를 입력받아, 인수 2개를 더한 결과를 반환하는 &lt;code&gt;sum&lt;/code&gt;이라는 함수와, 인수 2개 중 더 큰 값을 반환하는 &lt;code&gt;max&lt;/code&gt;라는 함수가 있다고 하자. 그러면 다음과 같은 결과를 볼 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;max&lt;/code&gt;는 파이썬에 내장되어 있는 함수이고, &lt;code&gt;sum&lt;/code&gt;은 &lt;code&gt;+&lt;/code&gt; 연산자의 기능을 함수로 만든 것인데, 이런식으로 함수를 직접 만드는 방법은 아마 나중에 함수 파트에서 자세히 배우지 않을까 싶다.&lt;/p&gt;
&lt;p&gt;그리고 파이썬은 &lt;strong&gt;객체지향&lt;/strong&gt; 언어이다. 즉, 객체에 딸린 함수들이 존재하고, **메소드(Method)**라고 부른다.&lt;/p&gt;
&lt;p&gt;일반적인 함수와 메소드의 차이는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수 : 함수의 이름만 써서 원할 때 호출할 수 있다.&lt;/li&gt;
&lt;li&gt;메소드 : 객체와 메소드 명을 모두 써야 하고, 객체가 존재해야만 호출할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 부분도 마찬가지로 자세한 내용은 추후 객체 파트가 나온다면 학습하지 않을까 싶다.&lt;/p&gt;
&lt;p&gt;(포스트 내용은 해당 챕터를 학습하며 지속적으로 추가됩니다.)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>시작하기</title>
        <link>https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
        <pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid>
        <description>&lt;img src="https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/cover.png" alt="Featured image of post 시작하기" /&gt;&lt;h3 id=&#34;교재-소개&#34;&gt;교재 소개&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;파이썬을 공부하고자 좋은 교재가 없는지 찾아보다, 기초 문법도 학습할 수 있고 개인 프로젝트도 직접 만들어 볼 수 있는 교재를 발견하였다. 바로 &lt;a class=&#34;link&#34; href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=186485278&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;게임으로 배우는 파이썬&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;cover.jpg&#34; alt=&#34;게임으로 배우는 파이썬&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;본 교재는 1부와 2부로 구성되어 있다.
&lt;ul&gt;
&lt;li&gt;1부에서는 파이썬의 기초 문법에 대해 학습&lt;/li&gt;
&lt;li&gt;2부에서는 학습한 내용을 기초로 하여 직접 고전 게임을 만들어보는 프로젝트를 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 해당 교재를 공부한 내용과 프로젝트를 수행한 결과물을 본 블로그 및 Github Repository에 업로드 할 예정이다!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-파이썬python-소개&#34;&gt;1. 파이썬(Python) 소개&lt;/h3&gt;
&lt;h4 id=&#34;11-라이브러리&#34;&gt;1.1 라이브러리&lt;/h4&gt;
&lt;p&gt;파이썬은 문법이 간단해 배우기 쉽지만, 그것만으로는 할 수 있는 일이 제한적이다.&lt;/p&gt;
&lt;p&gt;따라서 목적에 맞는 라이브러리를 로드해 사용한다.&lt;/p&gt;
&lt;p&gt;대표적인 라이브러리의 종류는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NumPy&lt;/strong&gt; : 수치 계산&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SciPy&lt;/strong&gt; : 과학 기술 계산&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PIL&lt;/strong&gt; : 영상처리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tkinter&lt;/strong&gt; : GUI(그래픽 유저 인터페이스)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Soup&lt;/strong&gt; : HTML 정보 수집(스크래핑)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PyGame&lt;/strong&gt; : 게임 제작&lt;/li&gt;
&lt;li&gt;파일을 읽고 쓰거나 네트워크 작업에 관련된 라이브러리 등의 &lt;strong&gt;표준 라이브러리&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;기타 수많은 &lt;strong&gt;3rd Party&lt;/strong&gt; 라이브러리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이처럼 다양한 라이브러리들이 많은데, 이 책은 게임을 만드는 것을 목표로 하고 있으므로 PyGame은 무조건 사용할 것 같고, 나중에 다른 라이브러리도 사용하게 될 지 모를 일이다.&lt;/p&gt;
&lt;h4 id=&#34;12-설치&#34;&gt;1.2 설치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Python 3 설치 : Windows 사용자는 아나콘다 혹은 파이썬을 설치할 것 (현재 최신 버전 : 3.9.2)&lt;/li&gt;
&lt;li&gt;PyGame 라이브러리 다운로드&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나는 아나콘다를 제외하고 파이썬만 &lt;a class=&#34;link&#34; href=&#34;https://www.python.org/downloads/windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;여기&lt;/a&gt;서 다운받아 설치하였다.&lt;/p&gt;
&lt;p&gt;설치 완료 후 명령 프롬프트를 열어 &lt;code&gt;pip install pygame&lt;/code&gt; 명령어를 입력한다.&lt;/p&gt;
&lt;p&gt;마찬가지로 설치가 완료되면, &lt;strong&gt;파이썬&lt;/strong&gt;을 실행해 &lt;code&gt;import pygame&lt;/code&gt; 명령어로 설치 여부를 확인한다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 583; flex-basis: 1399px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/capture01.PNG&#34; data-size=&#34;758x130&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/capture01.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/capture01_hu450ee7010b532a40b5fddad8da76df80_5442_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/capture01_hu450ee7010b532a40b5fddad8da76df80_5442_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;758&#34;
				height=&#34;130&#34;
				loading=&#34;lazy&#34;
				alt=&#34;이런 메시지가 출력되면 성공(인 것 같다)&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;이런 메시지가 출력되면 성공(인 것 같다)&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;MacOS 설치 방법은 생략하도록 하겠다(찾아보면 금방 나오고 별로 다르지도 않다).&lt;/p&gt;
&lt;p&gt;다음 글에서는 Python의 자료형과 자료구조에 대해 학습할 예정이다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>휴고(Hugo)로 Github 블로그 만들기 (1)</title>
        <link>https://everimind4.github.io/p/%ED%9C%B4%EA%B3%A0hugo%EB%A1%9C-github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-1/</link>
        <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%ED%9C%B4%EA%B3%A0hugo%EB%A1%9C-github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-1/</guid>
        <description>&lt;h3 id=&#34;1-github-블로그&#34;&gt;1. Github 블로그&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot; 개발자라면 &lt;strong&gt;Github 블로그&lt;/strong&gt; 하나 정도는 있어야지! &amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;라는 말을 어디선가 주워듣고 Github로 블로그를 만들어보자, 결심하게 되었다.&lt;/p&gt;
&lt;p&gt;그런데 생각보다 진입장벽이 낮지는 않았고, 익숙해지는 데 생각보다 시간이 걸린 데다 시행착오도 제법 겪으며 결국 어찌저찌 성공은 하였다(그 결과물을 지금 보고 계십니다).&lt;/p&gt;
&lt;p&gt;그래서 관련 내용을 정리해서 포스팅하면 Hugo로 블로그를 만들어 Github로 호스팅하고자 하는 사람들이 조금이나마 도움을 받을 수 있을 듯 하여, 첫 포스팅 주제는 블로그를 만드는 방법으로 결정!&lt;/p&gt;
&lt;h3 id=&#34;2-준비물&#34;&gt;2. 준비물&lt;/h3&gt;
&lt;p&gt;각 항목 클릭 시 해당 설치 파일을 받을 수 있는 웹사이트로 링크 (OS에 맞는 최신 버전을 다운로드)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo theme&lt;/a&gt; (마음에 드는 테마 하나 선택)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://typora.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Typora&lt;/a&gt; (Markdown 에디터)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-설치하기&#34;&gt;3. 설치하기&lt;/h3&gt;
&lt;h4 id=&#34;31-git-설치&#34;&gt;3.1. Git 설치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Hugo blog만 사용하고자 하는 경우 설치 옵션 그대로 유지&lt;/li&gt;
&lt;li&gt;명령 프롬프트에 &lt;code&gt;git version&lt;/code&gt;를 입력하여 잘 설치되었는지 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32-github-repository-2개-만들기&#34;&gt;3.2. Github Repository &lt;strong&gt;2개&lt;/strong&gt; 만들기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&#39;(Username).github.io&#39;&lt;/strong&gt; : 빌드 결과인 블로그 HTML 파일을 저장하는 Public Repository, &lt;strong&gt;이름 양식 필히 준수&lt;/strong&gt; (&lt;code&gt;everimind4.github.io&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Hugo blog 전체 파일을 관리하는 Private Repository, 이름 자유롭게 설정 (필자의 경우 &lt;code&gt;blog&lt;/code&gt;로 설정)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;33-로컬-디렉토리-생성-및-구성&#34;&gt;3.3. 로컬 디렉토리 생성 및 구성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;C:\Hugo\bin&lt;/strong&gt; 디렉토리 생성 후 다운로드한 Hugo Zip 파일 압축 해제&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows + Q ▶ 시스템 환경 변수 편집 ▶ &lt;strong&gt;PATH&lt;/strong&gt;에 &lt;strong&gt;C:\Hugo\bin&lt;/strong&gt; 추가&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git Bash 실행 후 &lt;strong&gt;C:\Hugo&lt;/strong&gt; 위치에서 &lt;code&gt;$ hugo new site blog&lt;/code&gt; 명령으로 로컬 컨텐츠 디렉토리 생성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C:\Hugo\blog&lt;/strong&gt;에서 &lt;code&gt;dir&lt;/code&gt; 명령으로 디렉토리 구조를 확인 가능&lt;/li&gt;
&lt;li&gt;이후, Git Bash 속성에서 시작 위치를 &lt;strong&gt;C:\Hugo\blog&lt;/strong&gt;로 설정하면 작업이 편해집니다!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;34-테마-다운로드-및-설정&#34;&gt;3.4. 테마 다운로드 및 설정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;2번에서 고른 테마의 github 저장소 주소를 복사&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;~\blog&lt;/strong&gt; 경로에서 &lt;code&gt;$ git init&lt;/code&gt; 명령 실행 후 &lt;code&gt;$ git submodule add (복사한 주소) themes\(테마 이름)&lt;/code&gt; 명령으로 테마를 submodule로 추가&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt; 파일의 내용을 각 테마 Github 페이지의 예시 파일을 보면서 수정
&lt;ul&gt;
&lt;li&gt;toml이 아닌 yml/yaml 파일만 존재하는 경우 YAML to TOML converter 등을 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;35-github-원격-저장소와-로컬-디렉토리-연결&#34;&gt;3.5. Github 원격 저장소와 로컬 디렉토리 연결&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Github에 만든 &lt;code&gt;blog&lt;/code&gt; 저장소(본인이 설정한 이름)와 &lt;strong&gt;C:\Hugo\blog&lt;/strong&gt; 디렉토리 연결
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C:\Hugo\blog&lt;/strong&gt;로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git remote add origin https://github.com/everimind4/blog.git public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;everimind4.github.io&lt;/code&gt; 저장소를 &lt;code&gt;blog&lt;/code&gt;의 submodule로 등록
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ git submodule add -b main https://github.com/everimind4/everimind4.github.io.git public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;36-컨텐츠-생성&#34;&gt;3.6. 컨텐츠 생성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ hugo new post/test.md&lt;/code&gt; 명령을 실행하면 &lt;code&gt;blog\content\post\&lt;/code&gt; 위치에 &lt;code&gt;test.md&lt;/code&gt; 파일이 생성됨&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Typora&lt;/strong&gt; 등의 Markdown Editor를 사용하여 md 파일 내용 작성 (자세한 방법을 다음 글에서 다룸)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ hugo server&lt;/code&gt; 또는 &lt;code&gt;hugo server -D&lt;/code&gt; 명령어로 웹서버 실행
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost:1313/&lt;/code&gt;에 접속해서 확인&lt;/li&gt;
&lt;li&gt;md 파일의 Draft 옵션이 true로 설정된 경우 빌드에서 제외됨&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D&lt;/code&gt; 옵션은 md파일의 Draft 문서들도 확인 가능한 옵션 (다른 옵션은 &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/commands/hugo_server/#options&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;여기&lt;/a&gt;서 확인)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;37-컨텐츠-업로드&#34;&gt;3.7. 컨텐츠 업로드&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C:\Hugo\blog&lt;/strong&gt;로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ hugo -t (테마이름)&lt;/code&gt; 명령으로 테마가 적용된 블로그 내용을 &lt;strong&gt;~\public&lt;/strong&gt;에 생성&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ cd public&lt;/code&gt; public 디렉토리로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git add .&lt;/code&gt; 수정된 파일 내역 저장&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git commit -m &amp;quot;(description)&amp;quot;&lt;/code&gt; 변경 내용 commit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git push origin main&lt;/code&gt; everimind4.github.io에 커밋 내용 Push&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blog&lt;/code&gt; 저장소에도 변경 내용 Push
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ cd ..&lt;/code&gt;  public의 한 단계 상위 디렉토리인 blog로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git add .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git commit -m &amp;quot;(description)&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git push origin main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-마무리하며&#34;&gt;4. 마무리하며&lt;/h3&gt;
&lt;p&gt;여기까지 따라왔다면 블로그에 글을 작성하고 빌드하여 블로그의 기초를 다지는 방법은 모두 배우셨습니다.&lt;/p&gt;
&lt;p&gt;이어지는 글들을 통해 아래 내용들을 다룰 예정입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블로그 세부 설정
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt; 파일의 세부 내용을 수정하기&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disquss&lt;/strong&gt; 등의 댓글 위젯 추가하기&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Analytics&lt;/strong&gt; 연동하기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sitemap.xml&lt;/code&gt;을 추가해 검색 엔진에 노출시키기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;마크다운 에디터 &lt;strong&gt;Typora&lt;/strong&gt;를 사용해 글쓰기
&lt;ul&gt;
&lt;li&gt;글 작성 Tips&lt;/li&gt;
&lt;li&gt;기본적인 문법 및 단축키&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
