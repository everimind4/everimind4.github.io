<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Alan Choi</title>
        <link>https://everimind4.github.io/</link>
        <description>Recent content on Alan Choi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 23 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://everimind4.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>리눅스 커널 입문</title>
        <link>https://everimind4.github.io/p/%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%BB%A4%EB%84%90-%EC%9E%85%EB%AC%B8/</link>
        <pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EB%A6%AC%EB%88%85%EC%8A%A4-%EC%BB%A4%EB%84%90-%EC%9E%85%EB%AC%B8/</guid>
        <description>&lt;h6 id=&#34;본-포스트에서는-리눅스-커널-심층-분석httpswwwaladincokrshopwproductaspxitemid18480581linux-kernel-development을-교재로-하여-공부한-내용을-정리합니다&#34;&gt;본 포스트에서는 &lt;a class=&#34;link&#34; href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=18480581&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;리눅스 커널 심층 분석&lt;/a&gt;(Linux Kernel Development)을 교재로 하여 공부한 내용을 정리합니다.&lt;/h6&gt;
&lt;h2 id=&#34;1-유닉스의-역사&#34;&gt;1. 유닉스의 역사&lt;/h2&gt;
&lt;p&gt;리눅스는 유닉스를 바탕으로 만들어졌다. 따라서 유닉스에 대해 간단하게 살펴볼 필요가 있다.&lt;/p&gt;
&lt;p&gt;유닉스는 1969년에 &lt;a class=&#34;link&#34; href=&#34;https://ko.wikipedia.org/wiki/%EB%8D%B0%EB%8B%88%EC%8A%A4_%EB%A6%AC%EC%B9%98&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;데니스 리치&lt;/a&gt;와 &lt;a class=&#34;link&#34; href=&#34;https://ko.wikipedia.org/wiki/%EC%BC%84_%ED%86%B0%ED%94%84%EC%8A%A8&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;켄 톰슨&lt;/a&gt;에 의해 개발되었다. 추후 많은 수정을 거치며 다양한 곳에서 강력한 도구로 사용되었다. 이처럼 유닉스가 널리 사용될 수 있도록 만들어 준 몇 가지 특징들은 다음과 같다.&lt;/p&gt;
&lt;h4 id=&#34;단순하다&#34;&gt;단순하다.&lt;/h4&gt;
&lt;p&gt;매우 직관적이고 명확한 몇백 가지의 시스템 호출(System call)로 이뤄져 있다.&lt;/p&gt;
&lt;h4 id=&#34;거의-모든-것이-파일이다&#34;&gt;(거의) 모든 것이 파일이다.&lt;/h4&gt;
&lt;p&gt;따라서 몇 가지 핵심 시스템 호출(&lt;code&gt;open()&lt;/code&gt;, &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, &lt;code&gt;lseek()&lt;/code&gt;, &lt;code&gt;close()&lt;/code&gt;) 만으로 모든 데이터와 장비를 다룰 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;커널과-유틸리티가-모두-c로-작성되었다&#34;&gt;커널과 유틸리티가 모두 C로 작성되었다.&lt;/h4&gt;
&lt;p&gt;C의 뛰어난 이식성으로 인해 유닉스는 다양한 아키텍처에 쉽게 이식이 가능하다.&lt;/p&gt;
&lt;h4 id=&#34;프로세스-생성이-빠르다&#34;&gt;프로세스 생성이 빠르다.&lt;/h4&gt;
&lt;p&gt;고유의 &lt;code&gt;fork()&lt;/code&gt; 시스템 호출을 사용한다.&lt;/p&gt;
&lt;h4 id=&#34;효율적인-프로세스-간-통신-수단ipc을-제공한다&#34;&gt;효율적인 프로세스 간 통신 수단(IPC)을 제공한다.&lt;/h4&gt;
&lt;p&gt;(아직 용어나 개념을 더 공부해야 하지만, 여하튼) &lt;strong&gt;단순하고 명쾌한 설계&lt;/strong&gt;가 최대 장점이라고 볼 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;2-리눅스의-개발&#34;&gt;2. 리눅스의 개발&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://ko.wikipedia.org/wiki/%EB%A6%AC%EB%88%84%EC%8A%A4_%ED%86%A0%EB%A5%B4%EB%B0%9C%EC%8A%A4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;리누스 토발즈&lt;/a&gt;(Linus Tobalds)는 대학을 다니던 중 리눅스를 개발했다.&lt;/p&gt;
&lt;p&gt;당시 학교에서는 &lt;em&gt;UNIX&lt;/em&gt;의 교육용 버전인 &lt;em&gt;Minix&lt;/em&gt;를 사용했다고 하는데, 소스 코드도 수정할 수 없었고 무엇보다도 &lt;strong&gt;Minix의 설계에 실망했다&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;이런 불만에 대해 리누스는 보통의 정상적인 대학생이 할만한 일을 했다.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;바로 &lt;strong&gt;직접 운영체제를 만들기로 한 것&lt;/strong&gt;이다.&lt;/p&gt;
&lt;p&gt;&amp;lt;리눅스 커널 심층 분석&amp;gt;(3판), p.39&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;del&gt;책에 오류가 있는 것 같지만 넘어가자&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;그리고 이후 대학 생활 내내 리눅스 에뮬레이터를 수정하고, 1991년 최초로 인터넷을 통해 공개했다. 이후 다양한 사람들의 참여로 리눅스는 점점 &lt;strong&gt;개발자의 협업 프로젝트&lt;/strong&gt;로 발전하게 되었다.&lt;/p&gt;
&lt;p&gt;리눅스는 유닉스와 비슷하지만 많은 차이가 있다. 다 정리할 수는 없고, 대표적인 특징만 이야기하자면 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;공통점&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;차이점&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;유닉스의 설계 목적 및 인터페이스를 계승하였고, API를 구현하였다.&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;상용 제품이 아닌 오픈소스이다. (단, 수정본도 오픈소스로 배포해야 한다.)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;또한 앞으로 &lt;strong&gt;리눅스&lt;/strong&gt;라는 단어는 주로 &lt;strong&gt;리눅스 커널&lt;/strong&gt;을 칭한다.&lt;/p&gt;
&lt;h2 id=&#34;3-운영체제와-커널&#34;&gt;3. 운영체제와 커널&lt;/h2&gt;
&lt;h4 id=&#34;운영체제의-정의&#34;&gt;운영체제의 정의&lt;/h4&gt;
&lt;p&gt;명확한 정의는 어렵지만, 기술적 관점에서는 기본적인 사용 및 관리를 담당하는 &lt;strong&gt;시스템의 일부&lt;/strong&gt;를 의미한다.&lt;/p&gt;
&lt;p&gt;커널, 장치 드라이버, 부트로더, CLI/GUI등의 사용자 인터페이스, 기본적인 파일 및 시스템 유틸리티 등이 포함된다.&lt;/p&gt;
&lt;h4 id=&#34;커널kernel이란&#34;&gt;커널(Kernel)이란?&lt;/h4&gt;
&lt;p&gt;운영체제의 가장 핵심이 되는 소프트웨어로, 다음 역할을 수행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시스템의 다른 모든 부분에 기본적인 서비스를 제공한다.&lt;/li&gt;
&lt;li&gt;하드웨어를 관리한다.&lt;/li&gt;
&lt;li&gt;시스템 자원을 분배한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;따라서 커널을 &lt;strong&gt;관리자&lt;/strong&gt;(Supervisor), &lt;strong&gt;코어&lt;/strong&gt;(Core), &lt;strong&gt;내부&lt;/strong&gt;(internals) 등으로 부른다.&lt;/p&gt;
&lt;h4 id=&#34;커널-구성-요소&#34;&gt;커널 구성 요소&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;인터럽트 핸들러(interrupt handler) : 인터럽트 서비스 요청 처리&lt;/li&gt;
&lt;li&gt;스케줄러(Scheduler) : 프로세스 실행 시간을 여러 프로세스에 분배&lt;/li&gt;
&lt;li&gt;메모리 관리 시스템 : 프로세스 주소 공간 관리&lt;/li&gt;
&lt;li&gt;시스템 서비스 : 네트워크 및 프로세스 간 통신 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;커널-공간과-사용자-공간&#34;&gt;커널 공간과 사용자 공간&lt;/h4&gt;
&lt;p&gt;커널 공간은 &lt;strong&gt;시스템 상태와 메모리 공간을 합친 것&lt;/strong&gt;을 의미하고, 사용자 공간은 &lt;strong&gt;사용자 애플리케이션이 실행&lt;/strong&gt;되는 공간을 의미한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;커널 코드를 실행하는 경우&lt;/strong&gt; 시스템은 커널 모드로 커널 공간에 존재한다.&lt;/p&gt;
&lt;p&gt;반면 시스템이 &lt;strong&gt;일반적인 프로세스를 처리하는 경우&lt;/strong&gt;에는 사용자 모드로 사용자 공간에 존재한다.&lt;/p&gt;
&lt;h4 id=&#34;인터럽트&#34;&gt;인터럽트&lt;/h4&gt;
&lt;p&gt;커널은 시스템의 하드웨어도 관리한다. 여기서 &amp;lsquo;인터럽트&amp;rsquo;라는 개념이 등장하는데, 하드웨어와 시스템이 서로 통신할 때 하드웨어는 인터럽트를 발생시키고, 프로세서를 중단시킨 후 커널을 중단시킨다. 키보드나 마우스로 입력을 하는 경우에 이런 인터럽트가 발생하게 된다.&lt;/p&gt;
&lt;p&gt;외부로부터 입력이 존재하는 경우 기존 실행 중이던 프로세스에 해당 신호를 보내는 것을 의미한다고 볼 수 있을 것 같다.&lt;/p&gt;
&lt;p&gt;인터럽트의 종류는 숫자로 구분된다. 커널은 이 숫자를 이용해 인터럽트를 처리하고 응답할 인터럽트 핸들러를 실행한다. 인터럽트 핸들러는 프로세스 컨텍스트에서 실행되지 않고, 다른 프로세스와 분리된 별도의 인터럽트 컨텍스트에서 실행한다.&lt;/p&gt;
&lt;h4 id=&#34;프로세스의-상태&#34;&gt;프로세스의 상태&lt;/h4&gt;
&lt;p&gt;따라서 프로세스는 어느 순간 반드시 다음 3가지 중 한 가지 일을 한다고 볼 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 공간에서 프로세스의 사용자 코드를 실행&lt;/li&gt;
&lt;li&gt;커널 공간의 프로세스 컨텍스트에서 특정 프로세스를 대신해 코드를 실행&lt;/li&gt;
&lt;li&gt;커널 공간의 인터럽트 컨텍스트에서 프로세스와 상관없이 인터럽트를 처리&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-리눅스-커널-vs-유닉스-커널&#34;&gt;4. 리눅스 커널 vs 유닉스 커널&lt;/h2&gt;
&lt;p&gt;리눅스는 유닉스처럼 메모리 관리 장치(MMU)가 필요한 모노리딕(Monolithic) 커널이다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;모노리딕(Monolithic) 커널&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;마이크로(Micro) 커널&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;특징&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;단일 주소 공간에서 단일 프로세스로 실행&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;커널의 기능을 별도로 분리한 &amp;lsquo;서버 프로세스&amp;rsquo;로 실행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;호출&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;커널 내의 통신으로 함수를 직접 호출&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IPC를 통해 메시지를 보내 서비스를 간접적으로 호출&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;실행 공간&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;모든 기능이 커널 공간에서 실행&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;특정 프로세스를 제외한 나머지는 모두 유저 공간에서 실행&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;장점&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;같은 공간에서 실행되므로 단순하고 빠름&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;서버가 분리되어 있어 문제가 생겨도 서로 영향을 주지 않음&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;여기서 마이크로 커널은 여러 서버 프로세스로 나뉘어 있어 복잡하며 성능이 다소 저하된다는 문제가 있다.&lt;/p&gt;
&lt;p&gt;그리고 리눅스는 모노리딕 커널임에도 모듈화 및 스레드 지원, 스케줄링 구현 등을 통해 마이크로 커널의 장점을 구현하였다.&lt;/p&gt;
&lt;h2 id=&#34;5-리눅스-커널-버전&#34;&gt;5. 리눅스 커널 버전&lt;/h2&gt;
&lt;p&gt;리눅스 커널 버전은 &lt;code&gt;.&lt;/code&gt;으로 구분된 4개의 숫자로 이루어져 있다.&lt;/p&gt;
&lt;p&gt;예를 들어 커널 버전이 &lt;code&gt;2.6.26.1&lt;/code&gt;이라고 하면, 각 숫자는 다음을 의미한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;2&lt;/code&gt; : 메인 버전&lt;/li&gt;
&lt;li&gt;&lt;code&gt;6&lt;/code&gt; : 서브 버전&lt;/li&gt;
&lt;li&gt;&lt;code&gt;26&lt;/code&gt; : 개정판&lt;/li&gt;
&lt;li&gt;&lt;code&gt;1&lt;/code&gt; : 안정 버전 일련번호&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;안정-버전과-개발-버전&#34;&gt;안정 버전과 개발 버전&lt;/h4&gt;
&lt;p&gt;서브 버전을 나타내는 2번째 숫자가 &lt;strong&gt;짝수이면 안정 버전, 홀수이면 개발 버전&lt;/strong&gt;이다.&lt;/p&gt;
&lt;p&gt;안정 버전은 소규모 업데이트가 일어나고, 개발 버전은 급격하고 빠른 변화가 일어난다.&lt;/p&gt;
&lt;p&gt;4번째 숫자는 안정 버전에서만 사용되며, 해당 버전이 몇 번째인가를 나타낸다.&lt;/p&gt;
&lt;h2 id=&#34;마치며&#34;&gt;마치며&lt;/h2&gt;
&lt;p&gt;여기까지 리눅스 커널의 기본적인 개념에 대해 알아보았다.&lt;/p&gt;
&lt;p&gt;다음 챕터의 내용은 리눅스 설치를 다루고 있는데, 구체적으로 정리하기보다 그냥 훑고 넘어가기로 하였다.&lt;/p&gt;
&lt;p&gt;따라서 다음 글은 3장 &amp;lsquo;프로세스 관리&amp;rsquo;부터 다루게 될 예정이다.&lt;/p&gt;
&lt;p&gt;(다음 글에서 계속됩니다.)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>데이터형과 데이터 구조 (2)</title>
        <link>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/</link>
        <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/</guid>
        <description>&lt;img src="https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/cover.png" alt="Featured image of post 데이터형과 데이터 구조 (2)" /&gt;&lt;h2 id=&#34;4-데이터형&#34;&gt;4. 데이터형&lt;/h2&gt;
&lt;p&gt;파이썬의 기본적인 데이터형은 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;종류&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;예약어&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;상세&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;예시&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;정수&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;소수점이 없음&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;4&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;실수&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;소수점이 있음&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;3.14&lt;/code&gt;, &lt;code&gt;2.71&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;문자열(String)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;문자열의 나열&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&#39;everimind4&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;부울(Boolean)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;논리값을 저장&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;1-숫자&#34;&gt;1. 숫자&lt;/h4&gt;
&lt;p&gt;숫자를 저장하기 위한 변수는 다른 언어들과 마찬가지로 2종류가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정수형 : 정수 값을 저장, 소수점이 없다.&lt;/li&gt;
&lt;li&gt;실수형 : 실수 값을 저장, 소수점이 있고, 부동소수형이라고도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;C와의 차이점 : 예약어로 변수의 데이터형을 지정할 필요 없이 그냥 값을 저장하면 자동으로 지정된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그리고 다음과 같은 규칙이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;같은 데이터형끼리 계산하면 기본적으로 같은 데이터형이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정수끼리 나눗셈을 하면 실수형이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정수와 실수형을 서로 계산하면 결과는 실수형이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-문자열&#34;&gt;2. 문자열&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;C와의 차이점 : 문자(char)형 변수는 없고 문자열(string)만 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;문자열은 &lt;code&gt;&#39; &#39;&lt;/code&gt; 또는 &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;로 감싸서 만든다.&lt;/p&gt;
&lt;p&gt;그 이유는, &lt;code&gt;&#39;&lt;/code&gt;&lt;strong&gt;나&lt;/strong&gt; &lt;code&gt;&amp;quot;&lt;/code&gt;&lt;strong&gt;가 포함된 문자열을 저장하기 위해서&lt;/strong&gt;이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C에서는 &lt;code&gt;\&#39;&lt;/code&gt; 또는 &lt;code&gt;\&amp;quot;&lt;/code&gt;와 같이 해당 기호 앞에 백슬래시(&lt;code&gt;\&lt;/code&gt;)를 적어 주는 방식으로 정규표현식을 사용해 이와 같은 문제를 해결하였다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Hi, my name is &amp;quot;Alan Choi&amp;quot;.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;위 문장을 저장하려면 어떻게 해야 할까? &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;를 사용하면 &lt;code&gt;is &lt;/code&gt;까지만 저장하라는 의미가 되어 버릴 것이다. 이런 경우를 방지하기 위해 &lt;code&gt;&#39; &#39;&lt;/code&gt;와 &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;의 2가지 형태를 지원한다.&lt;/p&gt;
&lt;h2 id=&#34;5-형변환&#34;&gt;5. 형변환&lt;/h2&gt;
&lt;p&gt;데이터형은 서로 형변환이 가능하다.&lt;/p&gt;
&lt;p&gt;특정한 경우 변환 시 에러가 발생하는 것을 제외하면, 기본적으로 모든 자료형 간의 상호 변환이 가능하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C와의 차이점 : C에서는 자체 문법으로 명시적(explicit) 혹은 묵시적(implicit) 방식으로 형변환을 했지만, 파이썬은 &lt;strong&gt;데이터형의 예약어를 이름으로 갖는 내장 함수를 사용&lt;/strong&gt;해 형변환을 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1-정수로-변환&#34;&gt;1. 정수로 변환&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;int(변환할 값)&lt;/code&gt;함수를 사용해 값을 변환한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;실수형은 소숫점 이하를 버린다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;는 1, &lt;code&gt;False&lt;/code&gt;는 0으로 변환된다.&lt;/li&gt;
&lt;li&gt;문자열은 읽는 것처럼 변환해 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;무슨 말이냐 하면, 2번째 줄의 코드 &lt;code&gt;int(&amp;quot;-4&amp;quot;)&lt;/code&gt;는 문자열을 정수로 변환한 것인데, 액면가(?) 그대로 인식해 사람이 읽는 것처럼 값으로 변환해 주는 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;그렇다면 이런 코드를 실행하면 어떻게 될까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, python!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다음과 같은 &lt;strong&gt;에러가 발생&lt;/strong&gt;한다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 507; flex-basis: 1219px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture01.PNG&#34; data-size=&#34;960x189&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture01.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture01_huee4f835e14086be59441d50066b37ebb_11078_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture01_huee4f835e14086be59441d50066b37ebb_11078_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;960&#34;
				height=&#34;189&#34;
				loading=&#34;lazy&#34;
				alt=&#34;문자열은 항상 정수로 변환될까?&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;문자열은 항상 정수로 변환될까?&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-실수로-변환&#34;&gt;2. 실수로 변환&lt;/h4&gt;
&lt;p&gt;정수형과 마찬가지로, &lt;code&gt;float(변환할 값)&lt;/code&gt; 함수를 사용해 값을 변환한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.0&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-4.26&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.26&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;실수형과 크게 다르지 않은 결과를 보인다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정수형은 소수점 이하를 &lt;code&gt;.0&lt;/code&gt;으로 저장한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;는 1.0, &lt;code&gt;False&lt;/code&gt;는 0.0으로 변환된다.&lt;/li&gt;
&lt;li&gt;문자열은 읽는 것처럼 변환해 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그리고 (예상했겠지만) 다음과 같은 문자열 변환은 실수형과 마찬가지로 에러를 반환한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, python!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure style=&#34;flex-grow: 516; flex-basis: 1238px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture02.PNG&#34; data-size=&#34;960x186&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture02.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture02_hu6bc48a0eafabe5e1a291411080a3f72b_10947_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture02_hu6bc48a0eafabe5e1a291411080a3f72b_10947_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;960&#34;
				height=&#34;186&#34;
				loading=&#34;lazy&#34;
				alt=&#34;실수형도 에러가 발생한다.&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;실수형도 에러가 발생한다.&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-문자열로-변환&#34;&gt;3. 문자열로 변환&lt;/h4&gt;
&lt;p&gt;문자열로 변환하려면 &lt;code&gt;str(변환할 값)&lt;/code&gt;함수를 사용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.22&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;-3.22&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;True&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;False&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;변환 결과가 전부 &lt;code&gt;&#39; &#39;&lt;/code&gt;로 감싸진 문자열이다.&lt;/p&gt;
&lt;h4 id=&#34;4-부울형으로-변환&#34;&gt;4. 부울형으로 변환&lt;/h4&gt;
&lt;p&gt;부울형으로 변환하려면 &lt;code&gt;bool(변환할 값)&lt;/code&gt;함수를 사용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.22&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, python!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;0, 0.0, 빈 문자열은 &lt;code&gt;False&lt;/code&gt;가 된다.&lt;/li&gt;
&lt;li&gt;그 이외의 값은 전부 &lt;code&gt;True&lt;/code&gt;가 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-리스트-튜플-딕셔너리&#34;&gt;6. 리스트, 튜플, 딕셔너리&lt;/h2&gt;
&lt;p&gt;파이썬을 제대로 사용하려면 반드시 이해하고 있어야 하는 핵심적인 자료형들이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;리스트
&lt;ul&gt;
&lt;li&gt;0개 이상의 요소가 나열(Sequence)된 자료형&lt;/li&gt;
&lt;li&gt;요소의 추가 및 삭제, 덮어쓰기가 가능(&lt;strong&gt;mutable&lt;/strong&gt;)하다.&lt;/li&gt;
&lt;li&gt;요소를 &lt;code&gt;[ ]&lt;/code&gt;로 감싸서 만든다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;튜플
&lt;ul&gt;
&lt;li&gt;0개 이상의 요소가 나(Sequence)열된 자료형&lt;/li&gt;
&lt;li&gt;한 번 만들어지고 나면 변경이 불가능하다(&lt;strong&gt;immutable&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;요소를 &lt;code&gt;( )&lt;/code&gt;로 감싸서 만든다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;딕셔너리
&lt;ul&gt;
&lt;li&gt;키(Key)와 값(Value)의 쌍으로 이루어진 자료형&lt;/li&gt;
&lt;li&gt;키(Key)는 인덱스(Index) 역할을 하며, &lt;strong&gt;다른 키(Key)와 중복될 수 없다&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;값(Value)은 키에 연결되며, 다른 값(Value)과 중복될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;C와의 차이점&lt;/p&gt;
&lt;p&gt;리스트와 튜플은 C의 &amp;lsquo;배열(Array)&amp;lsquo;과 사용법이나 특징이 거의 동일하다. 리스트는 수정 가능한 배열, 튜플은 수정 불가능한 배열로 보아도 무방하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;어차피 동일하다면, 값을 수정할 수 없는 튜플이 무슨 의미가 있는가?&lt;/em&gt; 라는 생각이 들 수도 있다.&lt;/p&gt;
&lt;p&gt;그러나 리스트에 비해 메모리를 적게 소비하고, 데이터를 실수로라도 변경할 수 없다는 점 등에서 차이가 난다.&lt;/p&gt;
&lt;p&gt;결국 적재적소에 잘 사용하는 것이 중요하다.&lt;/p&gt;
&lt;h4 id=&#34;1-리스트&#34;&gt;1. 리스트&lt;/h4&gt;
&lt;p&gt;리스트는 0개 이상의 요소를 &lt;code&gt;,&lt;/code&gt;로 구분하여 &lt;code&gt;[ ]&lt;/code&gt;를 사용해 선언한다.&lt;/p&gt;
&lt;p&gt;요소는 어떤 데이터형도 가능하다. 숫자, 문자, 부울뿐만 아니라 &lt;strong&gt;리스트, 튜플, 딕셔너리도 가능&lt;/strong&gt;하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Months&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;January&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;February&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;December&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Friends&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Alan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Crystal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Sally&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffees&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Americano&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Espresso&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Latte&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Macchiato&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Einspanner&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;특정 값을 참조하려면 리스트명 뒤에 &lt;code&gt;[번호]&lt;/code&gt;를 붙이며, 값을 변경할 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;번호는 0부터 시작&lt;/strong&gt;한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Months&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;March&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffees&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;Einspanner&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Friends&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Alan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Crystal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sally&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;append()&lt;/code&gt;메소드를 사용해 리스트 맨 끝에 요소를 추가할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffees&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Cappuccino&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffees&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Americano&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Espresso&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Latte&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Macchiato&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Einspanner&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Cappucchino&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;insert()&lt;/code&gt;메소드를 사용해 지정한 위치에 요소를 추가할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Friends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;No-Face&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Friends&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Alan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Crystal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;No-Face&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sally&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;del&lt;/code&gt; 명령어를 사용해 리스트의 요소를 삭제할 수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;del&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffees&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffees&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Americano&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Latte&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Macchiato&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Einspanner&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Cappucchino&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;del&lt;/code&gt;은 &lt;strong&gt;메소드가 아니라 파이썬 문법 내의 명령어&lt;/strong&gt;이다. 따라서, &lt;code&gt;Coffees.del(...)&lt;/code&gt;과 같은 방식으로 사용할 수 없다. 자세한 부분은 추후 클래스 챕터에서 다룬다.&lt;/p&gt;
&lt;h4 id=&#34;2-튜플&#34;&gt;2. 튜플&lt;/h4&gt;
&lt;p&gt;튜플은 0개 이상의 요소를 &lt;code&gt;,&lt;/code&gt;로 구분하여 선언한다. &lt;code&gt;( )&lt;/code&gt;&lt;strong&gt;를 사용하지 않고도 선언 가능&lt;/strong&gt;하지만, 튜플임을 명확히 나타내려면 &lt;code&gt;( )&lt;/code&gt;로 감싸 선언하는 편이 명확하다.&lt;/p&gt;
&lt;p&gt;보통 고정된 개수의 값을 포함하는 정보를 튜플에 묶어서 저장한다.&lt;/p&gt;
&lt;p&gt;본 교재의 목표는 게임 제작이다. 게임에서는 2차원상의 위치정보(x좌표, y좌표)를 저장할 필요가 있다.&lt;/p&gt;
&lt;p&gt;이와 같이 고정된 개수의 변수를 묶어서 저장하고 관리할 때는 튜플이 적합하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;값을 변경할 수 없으므로 리스트의 &lt;code&gt;append()&lt;/code&gt;, &lt;code&gt;insert()&lt;/code&gt;, &lt;code&gt;del&lt;/code&gt;등은 사용할 수 없다.&lt;/p&gt;
&lt;h5 id=&#34;튜플에는-독특한-사용법이-있다&#34;&gt;튜플에는 독특한 사용법이 있다.&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;언팩(Unpack)&lt;/strong&gt; : 하나의 튜플을 여러 변수에 대입하는 것&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position_x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position_y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position_x&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position_y&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;position&lt;/code&gt;이라는 이름의 튜플에 저장된 값이 &lt;code&gt;position_x&lt;/code&gt;와 &lt;code&gt;position_y&lt;/code&gt;에 나뉘어 저장된 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;이를 응용하면 다음 작업도 가능하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이는 마치 튜플의 값이 바뀐 것처럼 보이지만, 사실은 다음과 같은 과정을 거치게 된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(y, x)가 3, 4으로 언팩된다.&lt;/li&gt;
&lt;li&gt;새로운 튜플 (x, y)가 선언되고, 3, 4으로 초기화된다.&lt;/li&gt;
&lt;li&gt;x = 3, y = 4라는 값을 출력한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;상기한 대로, &lt;strong&gt;튜플의 값은 변화시킬 수 없다&lt;/strong&gt;. 하지만 이는 튜플에 저장된 값을 수정하는 것이 아니라, &lt;strong&gt;새로 선언된 튜플을 초기화하는 값으로 기존 튜플의 언팩을 사용한 것&lt;/strong&gt;이다!&lt;/p&gt;
&lt;h4 id=&#34;3-딕셔너리&#34;&gt;3. 딕셔너리&lt;/h4&gt;
&lt;p&gt;말 그대로 사전처럼 쓸 수 있는 데이터 구조이다.&lt;/p&gt;
&lt;p&gt;리스트와 튜플에서는 숫자로 특정 값을 찾을 수 있었지만, 딕셔너리에서는 &amp;lsquo;키(Key)&amp;lsquo;로 &amp;lsquo;값(Value)&amp;lsquo;을 찾을 수 있다.&lt;/p&gt;
&lt;p&gt;선언 방법은 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Smith&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    	&lt;span class=&#34;s2&#34;&gt;&amp;#34;Age&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    	&lt;span class=&#34;s2&#34;&gt;&amp;#34;Sex&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    	&lt;span class=&#34;s2&#34;&gt;&amp;#34;Height&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;176&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Age&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sex&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Height&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;176&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Age&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;36&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Age&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sex&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Height&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;176&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;{ }&lt;/code&gt;로 감싸고, &lt;code&gt;(Key) : (Value)&lt;/code&gt;형태로 데이터를 작성한다. 키-값 쌍을 여러 개 저장하고 싶으면 &lt;code&gt;,&lt;/code&gt;로 구분한다.&lt;/p&gt;
&lt;p&gt;키와 값은 임의의 데이터형을 모두 사용할 수 있지만 일반적으로 키에는 문자열을 사용한다.&lt;/p&gt;
&lt;p&gt;딕셔너리의 요소를 참조하고자 할 때는 리스트/튜플과는 다르게 &lt;code&gt;[]&lt;/code&gt; 내에 &lt;strong&gt;번호가 아닌 키 값을 지정&lt;/strong&gt;한다.&lt;/p&gt;
&lt;p&gt;지금까지의 내용을 정리하면 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;리스트&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;튜플&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;사전&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;선언법&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;[ ]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;( )&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;{ }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;데이터 구조&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;나열(Sequence)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;나열(Sequence)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;K-V 쌍 (Dictionary)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;참조 방식&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;변수명[번호]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;변수명[번호]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;변수명[키]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;특징&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;수정 가능함&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;수정 불가함&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;순서가 없음&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;4-다차원-리스트튜플&#34;&gt;4. 다차원 리스트(튜플)&lt;/h4&gt;
&lt;p&gt;앞서 한 번 언급한 적 있지만, &lt;strong&gt;리스트나 튜플은 또 다른 리스트나 튜플을 원소로 가질 수도 있다&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C에서도 배열을 비슷한 방식으로 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;배열의 원소가 배열인 경우를 2차원 배열이라고 부른다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;또한, 튜플의 원소가 리스트이거나, 리스트의 원소가 튜플일 수도 있다.&lt;/p&gt;
&lt;p&gt;이런 사용 방식에는 다음과 같은 특징이 따라오게 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리스트의 원소가 튜플인 경우 해당 튜플이 쉽게 다른 것으로 대체될 수 있다.&lt;/li&gt;
&lt;li&gt;튜플의 원소가 리스트인 경우 해당 리스트의 값을 수정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각 자료형을 사용하는 이점이 흐려지는 느낌이 들기 때문에, 내 생각에는 이런 형태는 지양하는 편이 나을 듯 하다.&lt;/p&gt;
&lt;p&gt;마지막으로 예시를 하나만 살펴보자.&lt;/p&gt;
&lt;p&gt;학생 3명의 이름을 저장한 튜플, 학생 3명의 개인 성적을 저장한 튜플이 있다고 하자. 이 2개의 튜플을 요소로 갖는 또 다른 튜플을 다음과 같이 선언할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Alan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Crystal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Sally&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;85&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Alan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Crystal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sally&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;85&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3번째 학생인 &lt;code&gt;&#39;Sally&#39;&lt;/code&gt;의 성적은 &lt;code&gt;score[2]&lt;/code&gt;로도 조회가 가능하지만, &lt;code&gt;data[0][2]&lt;/code&gt;로도 조회할 수 있다. &lt;code&gt;data[0]&lt;/code&gt;에 저장된 요소가 &lt;code&gt;score&lt;/code&gt;이기 때문이다!&lt;/p&gt;
&lt;p&gt;위의 예시에서는 각각 튜플을 미리 선언한 후, 해당 튜플의 이름을 새로운 튜플의 요소로 넣었지만 전체를 직접 작성하는 것도 가능하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Alan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Crystal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Sally&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;85&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Alan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Crystal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sally&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;85&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그리고 책에는 추가적인 예시로 틱택토 게임을 리스트의 리스트를 사용해 나타낼 수 있는 방법에 대해서도 소개하고 있었는데, 해당 부분은 생략하기로 한다.&lt;/p&gt;
&lt;p&gt;원래 이번 글에 챕터의 모든 내용을 정리하려 했으나 생각보다 길어지는 관계로, 리스트 및 튜플에 관련된 함수들은 다음 포스팅에서 다루기로 한다.&lt;/p&gt;
&lt;p&gt;(다음 글에서 계속됩니다.)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>데이터형과 데이터 구조 (1)</title>
        <link>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/</link>
        <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/</guid>
        <description>&lt;img src="https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/cover.png" alt="Featured image of post 데이터형과 데이터 구조 (1)" /&gt;&lt;h2 id=&#34;1-연산&#34;&gt;1. 연산&lt;/h2&gt;
&lt;h4 id=&#34;11-기본-연산자&#34;&gt;1.1 기본 연산자&lt;/h4&gt;
&lt;p&gt;코딩을 조금이라도 공부해 본 사람은 알겠지만, 파이썬에서는 여타 수많은 프로그래밍 언어와 마찬가지로 다양한 연산자를 지원하고 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;수학에서의 기호&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;파이썬에서의 기호&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;덧셈&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;뺄셈&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;곱셈&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;나눗셈&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;÷&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;주의할 점은, 자료형(정수형, 실수형, &amp;hellip;)에 따라 계산 방식이 조금씩 다를 수 있다는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;또, Python IDLE Shell에서는 파이썬 코드를 입력하면 실행 결과가 바로 출력되는 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 362; flex-basis: 869px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture01.PNG&#34; data-size=&#34;960x265&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture01.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture01_hu6142e893ab4f3b3035ffd2b56ef10dc1_10214_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture01_hu6142e893ab4f3b3035ffd2b56ef10dc1_10214_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;960&#34;
				height=&#34;265&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Python IDLE Shell :: 사칙연산&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Python IDLE Shell :: 사칙연산&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;그리고 맨 아래 계산 &lt;code&gt;(4 * 2) / 6&lt;/code&gt;을 보면 알 수 있겠지만, 일반적인 수학적 표현에서와 마찬가지로 괄호&lt;code&gt;( )&lt;/code&gt;를 이용해 계산의 우선순위를 지정할 수 있다.&lt;/p&gt;
&lt;p&gt;사칙연산 이외에도 여러 가지 연산자를 사용할 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자 종류&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;기호&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;나눗셈의 나머지 구하기&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;나눗셈의 몫 구하기&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;//&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;지수(거듭제곱) 구하기&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;**&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 446; flex-basis: 1071px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture02.PNG&#34; data-size=&#34;960x215&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture02.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture02_hucf88f40d78bd41d34a52d9fee90a0583_8994_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture02_hucf88f40d78bd41d34a52d9fee90a0583_8994_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;960&#34;
				height=&#34;215&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Python IDLE Shell :: 몫/나머지, 지수 계산&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Python IDLE Shell :: 몫/나머지, 지수 계산&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일반적인 나눗셈이 아닌 정수 나눗셈의 경우 몫과 나머지를 각각 %, // 연산자를 사용하여 계산한다.&lt;/li&gt;
&lt;li&gt;파이썬에서는 거듭제곱을 계산할 때 ** 연산자를 사용하여 (밑) ** (지수) 형태로 나타낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;몫과 나머지를 한 번에 구하는 &lt;code&gt;divmod()&lt;/code&gt; 함수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;divmod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-변수&#34;&gt;2. 변수&lt;/h2&gt;
&lt;p&gt;프로그래밍에서 변수는 값을 저장하고, 저장된 값을 변경할 수 있다는 특징이 있다.&lt;/p&gt;
&lt;p&gt;파이썬의 변수 사용법도 다른 언어와 크게 다르지 않다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다른 언어들과 마찬가지로 변수명을 정할 때는 몇 가지 규칙이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;알파벳 대소문자, 숫자, 언더바(&lt;code&gt;_&lt;/code&gt;)만 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;숫자는 맨 앞에 올 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예약어(reserved word)는 변수명이 될 수 없다.&lt;/p&gt;
&lt;p&gt;ex. &lt;code&gt;if&lt;/code&gt; &lt;code&gt;for&lt;/code&gt; &lt;code&gt;return&lt;/code&gt; . . .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 예시를 보면 알 수 있듯, 예약어는 특정 프로그래밍 언어 문법에서 이미 용도가 지정된 단어를 말한다.&lt;/p&gt;
&lt;p&gt;그리고 이쯤에서 한 마디 덧붙이자면, 책을 그대로 옮기는 듯한, 그러니까 일종의 아카이빙을 하는 느낌이 들기 시작했다.&lt;/p&gt;
&lt;p&gt;그래서 지금부터는 &lt;strong&gt;새롭게 배우게 된 내용을 정리&lt;/strong&gt;하고, 이미 &lt;strong&gt;알고 있는 내용은 간단하게 요약&lt;/strong&gt;하고 넘어가는 식으로 공부하기로 했다. 다른 프로그래밍 언어를 배우는 과정에서 이미 학습한 내용을 굳이 또 정리할 필요는 없기도 하고, 무엇보다도 현재 방식대로 진행하면 &lt;strong&gt;진도가 너무 느리다&lt;/strong&gt;. 어쨌든 이제부터는 빠르게 진행해보기로 결정!&lt;/p&gt;
&lt;h2 id=&#34;3-함수&#34;&gt;3. 함수&lt;/h2&gt;
&lt;p&gt;지금까지 여러 연산자들을 살펴보았다.&lt;/p&gt;
&lt;p&gt;지금 살펴보는 &lt;strong&gt;함수&lt;/strong&gt;는 이런 연산자들과 또 다른 함수들을 결합하여 &lt;strong&gt;특정 기능을 수행&lt;/strong&gt;하도록 만든 것이다.&lt;/p&gt;
&lt;p&gt;다른 언어들과 마찬가지로, 파이썬의 함수도 &lt;strong&gt;함수명 뒤에 괄호 &lt;code&gt;( )&lt;/code&gt;를 붙여 실행&lt;/strong&gt;한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수명(인수1, 인수2, &amp;hellip; )
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;인수&lt;/strong&gt; : 함수에 전달되는 값&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;반환값&lt;/strong&gt; : 함수로부터 돌아오는 값&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어 각각 인수 2개를 입력받아, 인수 2개를 더한 결과를 반환하는 &lt;code&gt;sum&lt;/code&gt;이라는 함수와, 인수 2개 중 더 큰 값을 반환하는 &lt;code&gt;max&lt;/code&gt;라는 함수가 있다고 하자. 그러면 다음과 같은 결과를 볼 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;max&lt;/code&gt;는 파이썬에 내장되어 있는 함수이고, &lt;code&gt;sum&lt;/code&gt;은 &lt;code&gt;+&lt;/code&gt; 연산자의 기능을 함수로 만든 것인데, 이런식으로 함수를 직접 만드는 방법은 아마 나중에 함수 파트에서 자세히 배우지 않을까 싶다.&lt;/p&gt;
&lt;p&gt;그리고 파이썬은 &lt;strong&gt;객체지향&lt;/strong&gt; 언어이다. 즉, 객체에 딸린 함수들이 존재하고, **메소드(Method)**라고 부른다.&lt;/p&gt;
&lt;p&gt;일반적인 함수와 메소드의 차이는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수 : 함수의 이름만 써서 원할 때 호출할 수 있다.&lt;/li&gt;
&lt;li&gt;메소드 : 객체와 메소드 명을 모두 써야 하고, 객체가 존재해야만 호출할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 부분도 마찬가지로 자세한 내용은 추후 객체 파트가 나온다면 학습하지 않을까 싶다.&lt;/p&gt;
&lt;p&gt;(다음 글에서 계속됩니다.)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>시작하기</title>
        <link>https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
        <pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid>
        <description>&lt;img src="https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/cover.png" alt="Featured image of post 시작하기" /&gt;&lt;h3 id=&#34;교재-소개&#34;&gt;교재 소개&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;파이썬을 공부하고자 좋은 교재가 없는지 찾아보다, 기초 문법도 학습할 수 있고 개인 프로젝트도 직접 만들어 볼 수 있는 교재를 발견하였다. 바로 &lt;a class=&#34;link&#34; href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=186485278&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;게임으로 배우는 파이썬&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;cover.jpg&#34; alt=&#34;게임으로 배우는 파이썬&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;본 교재는 1부와 2부로 구성되어 있다.
&lt;ul&gt;
&lt;li&gt;1부에서는 파이썬의 기초 문법에 대해 학습&lt;/li&gt;
&lt;li&gt;2부에서는 학습한 내용을 기초로 하여 직접 고전 게임을 만들어보는 프로젝트를 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 해당 교재를 공부한 내용과 프로젝트를 수행한 결과물을 본 블로그 및 Github Repository에 업로드 할 예정이다!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-파이썬python-소개&#34;&gt;1. 파이썬(Python) 소개&lt;/h3&gt;
&lt;h4 id=&#34;11-라이브러리&#34;&gt;1.1 라이브러리&lt;/h4&gt;
&lt;p&gt;파이썬은 문법이 간단해 배우기 쉽지만, 그것만으로는 할 수 있는 일이 제한적이다.&lt;/p&gt;
&lt;p&gt;따라서 목적에 맞는 라이브러리를 로드해 사용한다.&lt;/p&gt;
&lt;p&gt;대표적인 라이브러리의 종류는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NumPy&lt;/strong&gt; : 수치 계산&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SciPy&lt;/strong&gt; : 과학 기술 계산&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PIL&lt;/strong&gt; : 영상처리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tkinter&lt;/strong&gt; : GUI(그래픽 유저 인터페이스)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Soup&lt;/strong&gt; : HTML 정보 수집(스크래핑)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PyGame&lt;/strong&gt; : 게임 제작&lt;/li&gt;
&lt;li&gt;파일을 읽고 쓰거나 네트워크 작업에 관련된 라이브러리 등의 &lt;strong&gt;표준 라이브러리&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;기타 수많은 &lt;strong&gt;3rd Party&lt;/strong&gt; 라이브러리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이처럼 다양한 라이브러리들이 많은데, 이 책은 게임을 만드는 것을 목표로 하고 있으므로 PyGame은 무조건 사용할 것 같고, 나중에 다른 라이브러리도 사용하게 될 지 모를 일이다.&lt;/p&gt;
&lt;h4 id=&#34;12-설치&#34;&gt;1.2 설치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Python 3 설치 : Windows 사용자는 아나콘다 혹은 파이썬을 설치할 것 (현재 최신 버전 : 3.9.2)&lt;/li&gt;
&lt;li&gt;PyGame 라이브러리 다운로드&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나는 아나콘다를 제외하고 파이썬만 &lt;a class=&#34;link&#34; href=&#34;https://www.python.org/downloads/windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;여기&lt;/a&gt;서 다운받아 설치하였다.&lt;/p&gt;
&lt;p&gt;설치 완료 후 명령 프롬프트를 열어 &lt;code&gt;pip install pygame&lt;/code&gt; 명령어를 입력한다.&lt;/p&gt;
&lt;p&gt;마찬가지로 설치가 완료되면, &lt;strong&gt;파이썬&lt;/strong&gt;을 실행해 &lt;code&gt;import pygame&lt;/code&gt; 명령어로 설치 여부를 확인한다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 583; flex-basis: 1399px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/capture01.PNG&#34; data-size=&#34;758x130&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/capture01.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/capture01_hu450ee7010b532a40b5fddad8da76df80_5442_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/capture01_hu450ee7010b532a40b5fddad8da76df80_5442_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;758&#34;
				height=&#34;130&#34;
				loading=&#34;lazy&#34;
				alt=&#34;이런 메시지가 출력되면 성공(인 것 같다)&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;이런 메시지가 출력되면 성공(인 것 같다)&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;MacOS 설치 방법은 생략하도록 하겠다(찾아보면 금방 나오고 별로 다르지도 않다).&lt;/p&gt;
&lt;p&gt;다음 글에서는 Python의 자료형과 자료구조에 대해 학습할 예정이다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>휴고(Hugo)로 Github 블로그 만들기 (1)</title>
        <link>https://everimind4.github.io/p/%ED%9C%B4%EA%B3%A0hugo%EB%A1%9C-github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-1/</link>
        <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%ED%9C%B4%EA%B3%A0hugo%EB%A1%9C-github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-1/</guid>
        <description>&lt;h3 id=&#34;1-github-블로그&#34;&gt;1. Github 블로그&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot; 개발자라면 &lt;strong&gt;Github 블로그&lt;/strong&gt; 하나 정도는 있어야지! &amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;라는 말을 어디선가 주워듣고 Github로 블로그를 만들어보자, 결심하게 되었다.&lt;/p&gt;
&lt;p&gt;그런데 생각보다 진입장벽이 낮지는 않았고, 익숙해지는 데 생각보다 시간이 걸린 데다 시행착오도 제법 겪으며 결국 어찌저찌 성공은 하였다(그 결과물을 지금 보고 계십니다).&lt;/p&gt;
&lt;p&gt;그래서 관련 내용을 정리해서 포스팅하면 Hugo로 블로그를 만들어 Github로 호스팅하고자 하는 사람들이 조금이나마 도움을 받을 수 있을 듯 하여, 첫 포스팅 주제는 블로그를 만드는 방법으로 결정!&lt;/p&gt;
&lt;h3 id=&#34;2-준비물&#34;&gt;2. 준비물&lt;/h3&gt;
&lt;p&gt;각 항목 클릭 시 해당 설치 파일을 받을 수 있는 웹사이트로 링크 (OS에 맞는 최신 버전을 다운로드)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo theme&lt;/a&gt; (마음에 드는 테마 하나 선택)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://typora.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Typora&lt;/a&gt; (Markdown 에디터)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-설치하기&#34;&gt;3. 설치하기&lt;/h3&gt;
&lt;h4 id=&#34;31-git-설치&#34;&gt;3.1. Git 설치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Hugo blog만 사용하고자 하는 경우 설치 옵션 그대로 유지&lt;/li&gt;
&lt;li&gt;명령 프롬프트에 &lt;code&gt;git version&lt;/code&gt;를 입력하여 잘 설치되었는지 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32-github-repository-2개-만들기&#34;&gt;3.2. Github Repository &lt;strong&gt;2개&lt;/strong&gt; 만들기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&#39;(Username).github.io&#39;&lt;/strong&gt; : 빌드 결과인 블로그 HTML 파일을 저장하는 Public Repository, &lt;strong&gt;이름 양식 필히 준수&lt;/strong&gt; (&lt;code&gt;everimind4.github.io&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Hugo blog 전체 파일을 관리하는 Private Repository, 이름 자유롭게 설정 (필자의 경우 &lt;code&gt;blog&lt;/code&gt;로 설정)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;33-로컬-디렉토리-생성-및-구성&#34;&gt;3.3. 로컬 디렉토리 생성 및 구성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;C:\Hugo\bin&lt;/strong&gt; 디렉토리 생성 후 다운로드한 Hugo Zip 파일 압축 해제&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows + Q ▶ 시스템 환경 변수 편집 ▶ &lt;strong&gt;PATH&lt;/strong&gt;에 &lt;strong&gt;C:\Hugo\bin&lt;/strong&gt; 추가&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git Bash 실행 후 &lt;strong&gt;C:\Hugo&lt;/strong&gt; 위치에서 &lt;code&gt;$ hugo new site blog&lt;/code&gt; 명령으로 로컬 컨텐츠 디렉토리 생성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C:\Hugo\blog&lt;/strong&gt;에서 &lt;code&gt;dir&lt;/code&gt; 명령으로 디렉토리 구조를 확인 가능&lt;/li&gt;
&lt;li&gt;이후, Git Bash 속성에서 시작 위치를 &lt;strong&gt;C:\Hugo\blog&lt;/strong&gt;로 설정하면 작업이 편해집니다!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;34-테마-다운로드-및-설정&#34;&gt;3.4. 테마 다운로드 및 설정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;2번에서 고른 테마의 github 저장소 주소를 복사&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;~\blog&lt;/strong&gt; 경로에서 &lt;code&gt;$ git init&lt;/code&gt; 명령 실행 후 &lt;code&gt;$ git submodule add (복사한 주소) themes\(테마 이름)&lt;/code&gt; 명령으로 테마를 submodule로 추가&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt; 파일의 내용을 각 테마 Github 페이지의 예시 파일을 보면서 수정
&lt;ul&gt;
&lt;li&gt;toml이 아닌 yml/yaml 파일만 존재하는 경우 YAML to TOML converter 등을 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;35-github-원격-저장소와-로컬-디렉토리-연결&#34;&gt;3.5. Github 원격 저장소와 로컬 디렉토리 연결&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Github에 만든 &lt;code&gt;blog&lt;/code&gt; 저장소(본인이 설정한 이름)와 &lt;strong&gt;C:\Hugo\blog&lt;/strong&gt; 디렉토리 연결
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C:\Hugo\blog&lt;/strong&gt;로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git remote add origin https://github.com/everimind4/blog.git public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;everimind4.github.io&lt;/code&gt; 저장소를 &lt;code&gt;blog&lt;/code&gt;의 submodule로 등록
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ git submodule add -b main https://github.com/everimind4/everimind4.github.io.git public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;36-컨텐츠-생성&#34;&gt;3.6. 컨텐츠 생성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ hugo new post/test.md&lt;/code&gt; 명령을 실행하면 &lt;code&gt;blog\content\post\&lt;/code&gt; 위치에 &lt;code&gt;test.md&lt;/code&gt; 파일이 생성됨&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Typora&lt;/strong&gt; 등의 Markdown Editor를 사용하여 md 파일 내용 작성 (자세한 방법을 다음 글에서 다룸)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ hugo server&lt;/code&gt; 또는 &lt;code&gt;hugo server -D&lt;/code&gt; 명령어로 웹서버 실행
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost:1313/&lt;/code&gt;에 접속해서 확인&lt;/li&gt;
&lt;li&gt;md 파일의 Draft 옵션이 true로 설정된 경우 빌드에서 제외됨&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D&lt;/code&gt; 옵션은 md파일의 Draft 문서들도 확인 가능한 옵션 (다른 옵션은 &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/commands/hugo_server/#options&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;여기&lt;/a&gt;서 확인)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;37-컨텐츠-업로드&#34;&gt;3.7. 컨텐츠 업로드&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C:\Hugo\blog&lt;/strong&gt;로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ hugo -t (테마이름)&lt;/code&gt; 명령으로 테마가 적용된 블로그 내용을 &lt;strong&gt;~\public&lt;/strong&gt;에 생성&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ cd public&lt;/code&gt; public 디렉토리로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git add .&lt;/code&gt; 수정된 파일 내역 저장&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git commit -m &amp;quot;(description)&amp;quot;&lt;/code&gt; 변경 내용 commit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git push origin main&lt;/code&gt; everimind4.github.io에 커밋 내용 Push&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blog&lt;/code&gt; 저장소에도 변경 내용 Push
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ cd ..&lt;/code&gt;  public의 한 단계 상위 디렉토리인 blog로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git add .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git commit -m &amp;quot;(description)&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git push origin main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-마무리하며&#34;&gt;4. 마무리하며&lt;/h3&gt;
&lt;p&gt;여기까지 따라왔다면 블로그에 글을 작성하고 빌드하여 블로그의 기초를 다지는 방법은 모두 배우셨습니다.&lt;/p&gt;
&lt;p&gt;이어지는 글들을 통해 아래 내용들을 다룰 예정입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블로그 세부 설정
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt; 파일의 세부 내용을 수정하기&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disquss&lt;/strong&gt; 등의 댓글 위젯 추가하기&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Analytics&lt;/strong&gt; 연동하기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sitemap.xml&lt;/code&gt;을 추가해 검색 엔진에 노출시키기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;마크다운 에디터 &lt;strong&gt;Typora&lt;/strong&gt;를 사용해 글쓰기
&lt;ul&gt;
&lt;li&gt;글 작성 Tips&lt;/li&gt;
&lt;li&gt;기본적인 문법 및 단축키&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
