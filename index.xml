<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Alan Choi</title>
        <link>https://everimind4.github.io/</link>
        <description>Recent content on Alan Choi</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 13 Aug 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://everimind4.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Limited Direct Execution</title>
        <link>https://everimind4.github.io/p/limited-direct-execution/</link>
        <pubDate>Fri, 13 Aug 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/limited-direct-execution/</guid>
        <description>&lt;h2 id=&#34;virtualization-mechanism&#34;&gt;Virtualization Mechanism&lt;/h2&gt;
&lt;p&gt;저번까지 다룬 CPU 가상화의 핵심은 &lt;strong&gt;Time Sharing&lt;/strong&gt;이다.&lt;/p&gt;
&lt;p&gt;Time Sharing은 여러 개의 프로세스가 CPU의 시간을 나누어 쓰는 기법을 말한다.&lt;/p&gt;
&lt;p&gt;그렇다면 이러한 Time Sharing을 실제로 어떤 메커니즘으로 구현할 수 있을까? 지금부터는 이를 어떻게 구현했는지 살펴본다.&lt;/p&gt;
&lt;p&gt;Time Sharing 구현 이슈는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Performance : 가상화 구현 시 Context Switching 등의 오버헤드를 최소화해야 한다.&lt;/li&gt;
&lt;li&gt;Control : 운영체제가 CPU에 대한 제어권을 유지하며 프로세스를 효율적으로 동작시킬 수 있어야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;direct-execution&#34;&gt;Direct Execution&lt;/h2&gt;
&lt;p&gt;우선 성능 이슈를 해결하는 방법에 대해 알아본다.&lt;/p&gt;
&lt;p&gt;프로그램을 효율적으로 실행하려면 CPU에서 프로그램을 바로 실행하는 것이 좋다. 이를 Direct Execution이라 한다.&lt;/p&gt;
&lt;h4 id=&#34;direct-execution의-실행-흐름&#34;&gt;Direct Execution의 실행 흐름&lt;/h4&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 238; flex-basis: 573px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/limited-direct-execution/Direct_Execution.PNG&#34; data-size=&#34;1252x524&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/limited-direct-execution/Direct_Execution.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/limited-direct-execution/Direct_Execution_hub5fb8de29d7d24b09971e5e2536af4a3_41098_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/limited-direct-execution/Direct_Execution_hub5fb8de29d7d24b09971e5e2536af4a3_41098_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;1252&#34;
				height=&#34;524&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Direct Execution의 실행 흐름&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Direct Execution의 실행 흐름&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;1-6&lt;/code&gt; : OS가 CPU를 점유하고, 프로그램 실행을 위한 사전 작업을 수행한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;7-8&lt;/code&gt; : 프로그램의 &lt;code&gt;main()&lt;/code&gt; 함수를 실행한다. &lt;code&gt;return&lt;/code&gt; 명령 호출 전까지 프로그램이 CPU를 점유한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;9-10&lt;/code&gt; : 프로그램의 실행이 종료되고, OS가 다시 CPU를 점유한다.&lt;/p&gt;
&lt;p&gt;이러한 실행 방식은 OS를 거치지 않도 CPU에서 프로그램을 바로 실행할 수 있으므로 성능이 뛰어나다. 하지만 여기에는 2가지 문제점이 존재한다.&lt;/p&gt;
&lt;h4 id=&#34;problem-1--restricted-operation&#34;&gt;Problem 1 : Restricted Operation&lt;/h4&gt;
&lt;p&gt;프로그램이 CPU에서 직접 실행되는 경우에도, 다음 작업들은 운영체제가 적절히 제어해 줄 필요가 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프로세스에 메모리 공간 등의 자원 추가 할당 요청&lt;/li&gt;
&lt;li&gt;다른 프로세스의 데이터에 대한 접근&lt;/li&gt;
&lt;li&gt;저장 공간에 대한 I/O 요청&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;현대 운영체제에서는 이러한 &lt;strong&gt;Restricted Operation&lt;/strong&gt; 들을 OS가 중간에서 관리할 수 있도록 시스템의 실행 권한을 2가지 모드로 분리한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User Mode : 사용자 어플리케이션을 실행하는 모드로, OS의 허가 없이 시스템 자원을 사용할 수 없다.&lt;/li&gt;
&lt;li&gt;Kernel Mode : OS가 동작하는 모드로, Disk IO 및 시스템 자원 사용에 대한 요청을 할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;system-call&#34;&gt;System Call&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;시스템 콜(System Call)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;다음 작업을 수행하고 싶은 상황을 가정해 보자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;파일 시스템 액세스&lt;/li&gt;
&lt;li&gt;프로세스 생성 및 삭제&lt;/li&gt;
&lt;li&gt;프로세스 간 데이터 교환&lt;/li&gt;
&lt;li&gt;메모리 추가 할당&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;시스템 자원에 관련된 내용이므로 User Mode에서는 수행할 수 없을 것이다. 따라서 이러한 작업을 실행해 달라고 OS에게 요청하기 위한 도구가 바로 시스템 콜(System Call)이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;트랩 (Trap)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;트랩 명령어(Trap Instruction)는 User Mode에서 Kernel Mode로 전환시켜주는 CPU 명령어이다.&lt;/p&gt;
&lt;p&gt;User mode에서 Trap이 호출되면 현재 실행 중이던 유저 프로그램의 실행이 일시 중단되고 Kernel Mode로 전환된다.&lt;/p&gt;
&lt;p&gt;User Mode에서 Kernel Mode로 전환해 실행할 필요가 있는 작업은 전부 Trap을 통해 이뤄진다. 시스템 콜도 OS가 처리해야 하는 작업이므로 트랩을 호출한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Return-from-trap instruction&lt;/strong&gt;은 Kernel Mode에서 다시 User Mode로 되돌아가는 명령어이다.&lt;/p&gt;
&lt;p&gt;트랩이 발생하면 트랩 테이블을 참고하여 적절한 트랩 핸들러를 실행한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;트랩 테이블 : 트랩이 발생하면 OS 내의 어떤 코드를 실행해야 하는가를 기록하고 있는 자료구조&lt;/li&gt;
&lt;li&gt;트랩 핸들러 : 트랩에 따라 실행되어야 하는 코드이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;시스템 콜 번호 (System call Number)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;OS 내에는 백여 가지의 시스템 콜이 존재한다. 이를 구별하기 위해 시스템 콜 넘버가 존재한다.&lt;/p&gt;
&lt;p&gt;주의 : &lt;strong&gt;시스템 콜 번호와 트랩 테이블은 서로 다른 기능&lt;/strong&gt;이다. 모든 시스템 콜은 동일한 종류의 트랩이고, 시스템 콜에 해당하는 트랩 핸들러가 호출되면 시스템 콜 넘버를 보고 적절한 시스템 콜을 수행한다.&lt;/p&gt;
&lt;p&gt;유저가 시스템 콜을 호출할 때는 지정된 레지스터에 시스템 콜 넘버를 넣어 호출한다.&lt;/p&gt;
&lt;p&gt;여기까지의 내용을 반영해, 각각의 모드에서 수행 가능한 명령이 제한되어 있는 Limited Direct Execution의 실행 흐름은 다음과 같다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 96; flex-basis: 231px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/limited-direct-execution/LDEP_1.png&#34; data-size=&#34;1290x1335&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/limited-direct-execution/LDEP_1.png&#34;
				srcset=&#34;https://everimind4.github.io/p/limited-direct-execution/LDEP_1_hu398fbda8738211ef32c9caed07a7cd21_128325_480x0_resize_box_2.png 480w, https://everimind4.github.io/p/limited-direct-execution/LDEP_1_hu398fbda8738211ef32c9caed07a7cd21_128325_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;1290&#34;
				height=&#34;1335&#34;
				loading=&#34;lazy&#34;
				alt=&#34;System Call을 사용하는 Limited Direct Execution의 실행 흐름&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;System Call을 사용하는 Limited Direct Execution의 실행 흐름&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;사용자 프로그램은 User Mode에서 실행되며, Restricted Operation을 실행하고자 하는 경우 시스템 콜을 호출하여 프로그램의 실행을 일시 중단시키고 트랩을 발생시켜 Kernel Mode에서 요청한 작업을 수행한다.&lt;/p&gt;
&lt;p&gt;이렇게 프로그램 실행 자체는 CPU에서 이뤄지지만, 시스템 콜을 통해 제한을 두어서 실행한다고 하여 Limited Direct Execution이라고 한다.&lt;/p&gt;
&lt;p&gt;하드웨어 자원을 사용하고 싶으면 시스템 콜을 사용해 운영체제에 부탁하는 방식을 사용함으로써, 운영체제가 프로세스를 제어할 수 있도록 설정하였다.&lt;/p&gt;
&lt;h4 id=&#34;problem-2--switching-between-processes&#34;&gt;Problem 2 : Switching Between Processes&lt;/h4&gt;
&lt;p&gt;여기서 두 번째 이슈였던 OS의 제어권에 관한 이슈를 해결하는 방법에 대해 알아본다.&lt;/p&gt;
&lt;p&gt;그렇다면 프로세스 간의 Context Switching이 일어날 때 OS가 어떻게 제어권을 다시 얻을까?&lt;/p&gt;
&lt;p&gt;OS가 한 프로세스로부터 CPU를 돌려받아 다른 프로세스에게 넘겨주어야 한다.&lt;/p&gt;
&lt;p&gt;하지만 운영체제도 프로그램의 일종이므로, CPU를 점유하지 못하면 아무 작업도 할 수 없다.&lt;/p&gt;
&lt;p&gt;Direct Execution 방식으로 프로그램을 실행하면, Restricted Operation의 실행을 위해 잠시 실행 권한을 받아오는 것은 가능하다. 하지만 Context Switching을 위해 OS가 CPU 점유권을 다시 받아올 수 있다는 것은 보장할 수 없다!&lt;/p&gt;
&lt;p&gt;이를 해결하기 위한 2가지 방법이 존재한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;협조적인 방법 : 프로세스가 자발적으로 시스템 콜을 통해 CPU를 반납하는 것을 기다린다.&lt;/li&gt;
&lt;li&gt;비협조적인 방법 : 프로세스의 자발적 반납을 기다리지 않고 운영체제가 모든 작업을 제어한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;협조적인 방법&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;프로세스가 CPU 점유권을 OS에게 반납하는 방법은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세스의 CPU 점유권을 OS에게 반납하는 &lt;code&gt;yield&lt;/code&gt; 라는 시스템 콜을 사용한다.&lt;/li&gt;
&lt;li&gt;허용되지 않은 작업을 수행한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt;으로 나눗셈을 수행한다(Divide by zero).&lt;/li&gt;
&lt;li&gt;접근이 금지된 메모리 영역에 접근을 시도한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;초기 운영체제에서는 이런 방식을 사용하였지만, 여기에는 &lt;strong&gt;치명적인 단점&lt;/strong&gt;이 있다.&lt;/p&gt;
&lt;p&gt;의도하든 의도하지 않았든, 프로세스가 무한루프(Ininite loop)에 빠지게 되면 프로세스로부터 CPU를 다시 가져올 수 있는 방법이 사라지게 된다. 시스템을 재가동하는 것만이 유일한 해결책이 된다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;비협조적인 방법&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Timer Interrupt를 이용하는 방법이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;부팅 과정 중에 OS는 일종의 타이머를 작동시킨다.&lt;/li&gt;
&lt;li&gt;이 타이머는 일정 주기로 인터럽트(interrupt)를 발생시킨다.
&lt;ul&gt;
&lt;li&gt;인터럽트(interrupt)는 일종의 트랩(trap)이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;인터럽트 핸들러가 호출된다.&lt;/li&gt;
&lt;li&gt;현재 프로세스에서 CPU의 제어권을 뺏아 OS에게 돌려 준다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;그리고 OS는 다시 CPU의 제어권을 돌려 받아 방금까지 실행하고 있던 프로그램을 다시 실행시킬지, 새로운 프로그램을 실행할 지를 결정한다.&lt;/p&gt;
&lt;p&gt;새로운 프로그램을 실행하기로 결정한 경우에 Context Switching이 일어난다.&lt;/p&gt;
&lt;p&gt;Context Switch가 일어나는 동안 이러한 작업들이 수행된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;현재 프로세스의 상태를 나타내는 다음 레지스터 값들을 저장한다.
&lt;ul&gt;
&lt;li&gt;General Purpose Register에 저장된 값들&lt;/li&gt;
&lt;li&gt;프로그램 카운터 (현재 프로세스가 실행 중인 코드 위치를 가리킴)&lt;/li&gt;
&lt;li&gt;커널 스택 포인터&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;다음에 실행할 프로세스의 커널 스택으로부터 레지스터 값들을 불러온다.
&lt;ul&gt;
&lt;li&gt;주의 :  &lt;strong&gt;1번과 2번의 커널 스택은 서로 다른 커널 스택&lt;/strong&gt; (각 프로세스마다 커널 스택이 존재함)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;커널 스택을 다음에 수행할 프로세스의 커널 스택으로 전환한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;이 작업들은 Assembly Code로 작성되어 매우 빠르게 수행된다.&lt;/p&gt;
&lt;p&gt;여기까지의 내용이 반영된 Limited Direct Execution의 실행 흐름은 다음과 같다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 110; flex-basis: 265px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/limited-direct-execution/LDEP_2.png&#34; data-size=&#34;1282x1160&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/limited-direct-execution/LDEP_2.png&#34;
				srcset=&#34;https://everimind4.github.io/p/limited-direct-execution/LDEP_2_hu73c118f61bc63826e959666551738919_108910_480x0_resize_box_2.png 480w, https://everimind4.github.io/p/limited-direct-execution/LDEP_2_hu73c118f61bc63826e959666551738919_108910_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;1282&#34;
				height=&#34;1160&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Timer Interrupt를 사용하는 Limited Direct Execution의 실행 흐름&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Timer Interrupt를 사용하는 Limited Direct Execution의 실행 흐름&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;프로세스 A가 CPU를 OS에게 자발적으로 돌려주지 않더라도 정기적으로 Timer Interrupt가 발생하여 OS에게 CPU 제어권이 반환되며, Context Switching이 일어나 프로세스 간의 전환이 일어나는 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;여기서 주의할 점은, 위 실행 흐름을 자세히 보면 Kernel Mode와 Hardware에서 모두 Register 값을 저장하고 복구하는 것을 볼 수 있다. 이 두 값은 &lt;strong&gt;서로 다른 Register에 저장된 값을 의미&lt;/strong&gt;한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Hardware의 Register 값은 User Mode의 Register를 의미하며, Kernel Stack을 통해 저장하고 복구한다.&lt;/li&gt;
&lt;li&gt;OS의 Register 값은 Kernel Mode의 Register에 저장된 값을 의미한다. Process의 PCB에 저장하고 복구한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;concurrency-problem&#34;&gt;Concurrency Problem&lt;/h4&gt;
&lt;p&gt;추가로, 동시성 문제도 반드시 고려해야 한다. 트랩 실행 중에 다른 트랩(혹은 인터럽트)가 발생하는 경우가 문제가 될 수 있기 때문이다.&lt;/p&gt;
&lt;p&gt;OS는 다음과 같은 방법으로 이러한 문제를 해결한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인터럽트가 처리되는 도중에는 다른 인터럽트를 무효화(Disable Interrupt)한다.&lt;/li&gt;
&lt;li&gt;다양한 Locking Mechanism을 활용해 동일한 자료구조에 대한 접근을 방지한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Locking Mechanism에 관련된 내용은 Virtualization에 관한 내용을 모두 다룬 후, Concurrency 관련 내용을 다루며 학습하게 될 것이다.&lt;/p&gt;
&lt;h2 id=&#34;정리&#34;&gt;정리&lt;/h2&gt;
&lt;p&gt;Limited Direct Execution을 활용해 Time Sharing을 구현하는 방법에 대해 살펴보았다. 크게 2가지 방법을 사용하여 구현하였다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;성능을 고려하여, &lt;strong&gt;User Mode와 Kernel Mode를 분리하여 Direct Execution&lt;/strong&gt;을 한다.
&lt;ul&gt;
&lt;li&gt;Restricted Operation은 System Call을 사용하여 Kernel Mode에서 OS가 수행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS의 CPU 제어권을 고려하여, 하드웨어의 Timer Interrupt 기능을 이용해 주기적으로 Trap을 발생시킨다.
&lt;ul&gt;
&lt;li&gt;Direct Execution을 수행하더라도 OS에게 주기적으로 CPU 사용 권한이 돌아간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기까지 CPU 가상화를 위한 Virtualization Mechanism에 대해 알아보았다.&lt;/p&gt;
&lt;p&gt;다음 시간부터는 Virtualization Policies로서, Context Switching이 일어나는 순간에 어떤 프로세스를 수행할지를 결정하는 알고리즘인 Scheduling Algorithm에 대해 알아본다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>제어문 (2)</title>
        <link>https://everimind4.github.io/p/%EC%A0%9C%EC%96%B4%EB%AC%B8-2/</link>
        <pubDate>Mon, 26 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EC%A0%9C%EC%96%B4%EB%AC%B8-2/</guid>
        <description>&lt;img src="https://everimind4.github.io/p/%EC%A0%9C%EC%96%B4%EB%AC%B8-2/cover.png" alt="Featured image of post 제어문 (2)" /&gt;&lt;h2 id=&#34;5-함수&#34;&gt;5. 함수&lt;/h2&gt;
&lt;h4 id=&#34;정의&#34;&gt;정의&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;함수명&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;인수&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;인수&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;명령&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;명령&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;명령&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;n&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;value&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;일부 요소들은 생략 가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;인수가 없다면 생략할 수 있다.&lt;/li&gt;
&lt;li&gt;반환값이 필요 없으면 return을 생략할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;기본값-지정&#34;&gt;기본값 지정&lt;/h4&gt;
&lt;p&gt;특정 인수에 기본값을 지정해줄 수도 있다. 매개변수 선언 시 &lt;code&gt;매개변수 = 기본값&lt;/code&gt;의 형태로 작성한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;plus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;함수 호출 시 해당 매개변수의 입력을 생략하면 자동으로 기본값으로 설정된다.&lt;/p&gt;
&lt;p&gt;중요한 점은, &lt;strong&gt;기본값을 갖는 매개변수들은 무조건 뒤쪽에 배치&lt;/strong&gt;되어야 한다.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;뇌피셜 : 기본값이 지정된 매개변수가 중간에 선언된 경우, 실제 함수 호출 시 입력되는 값들이 어떤 매개변수에 전달되어야 하는지를 명확하게 알 수 없는 문제가 발생하기 때문이 아닐까?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;즉, ① &lt;code&gt;def sum(a = 0, b)&lt;/code&gt;는 불가능하고, ② &lt;code&gt;def sum(a, b = 0)&lt;/code&gt;은 가능하다.  &lt;code&gt;sum(4)&lt;/code&gt;를 실행하는 경우 ①번은 4라는 값이 a, b 중 어디에 전달되어야 하는지 명확하게 알 수 없기 때문이다.&lt;/p&gt;
&lt;h4 id=&#34;람다-함수&#34;&gt;람다 함수&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;def&lt;/code&gt; 예약어를 사용한 함수 정의 외에도 간단하게 함수를 정의해서 사용하는 방법도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;인수&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;인수&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;반환값&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이름이 없으므로 직접적인 호출이 불가능하다. 따라서 변수에 대입하고 C의 함수 포인터처럼 사용할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plus&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;plus&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;하지만 이렇게 사용하면 그냥 &lt;code&gt;def&lt;/code&gt;와 별다른 차이가 없으므로, lambda 함수는 인자로 &amp;lsquo;함수&amp;rsquo;를 입력받는 함수들에 일회용으로 사용되곤 한다.&lt;/p&gt;
&lt;h4 id=&#34;map&#34;&gt;map()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;map()&lt;/code&gt;함수는 리스트나 튜플의 전체 요소에 대해 특정한 처리를 하고 싶을 때 사용한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;map(처리를 하는 함수, 처리 대상 리스트/튜플)&lt;/code&gt;의 방식으로 사용한다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;def&lt;/code&gt;와 &lt;code&gt;lambda&lt;/code&gt; 2가지를 사용하여 리스트의 값을 제곱하는 예시를 살펴보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;square&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;map()&lt;/code&gt;함수는 &lt;code&gt;map&lt;/code&gt; 객체를 반환하므로 &lt;code&gt;list()&lt;/code&gt;함수를 사용하여 형변환을 해 줌으로써 결과로서 리스트를 얻는다.&lt;/p&gt;
&lt;p&gt;다음은 &lt;code&gt;lambda&lt;/code&gt;를 사용한 경우이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;map()&lt;/code&gt; 함수 밖에서 사용하고자 하는 간단한 기능의 함수를 정의할 필요 없이, &lt;code&gt;map()&lt;/code&gt; 함수 호출 시에 간단하게 원하는 기능을 함수로서 만들고자 할 때 &lt;code&gt;lambda&lt;/code&gt; 함수를 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;이처럼 &lt;code&gt;lambda&lt;/code&gt; 함수를 사용해 인자로 함수를 입력받는 함수들의 종류는 매우 다양하다.&lt;/p&gt;
&lt;h4 id=&#34;filter&#34;&gt;filter()&lt;/h4&gt;
&lt;p&gt;조건에 맞는 요소만 추출하는 함수이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;list&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;filter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;sorted&#34;&gt;sorted()&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt;는 전달된 리스트를 직접 정렬하지 않고, 요소들이 정렬된 또 다른 리스트를 반환하는 함수이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;labmda&lt;/code&gt; 함수를 인자로 전달해 &lt;code&gt;key = lambda . . .&lt;/code&gt;형태로 정렬 기준을 지정해줄 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watermelon&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;mango&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;grapefruit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;grapefruit&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mango&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;watermelon&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watermelon&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;mango&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;grapefruit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;mango&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;watermelon&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;grapefruit&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;리스트 각 요소의 길이를 기준으로 정렬된 결과 리스트가 반환된 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;reverse=True&lt;/code&gt; 인자를 입력하는 경우 정렬 순서를 반대로 설정할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;watermelon&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;mango&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;grapefruit&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;banana&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reverse&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;watermelon&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;grapefruit&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;banana&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mango&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;튜플의 두 번째 요소를 기준으로 정렬하는 등의 활용도 가능하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;→&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;→&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sorted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;lambda&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;//&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;→&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;→&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;리스트-내포-표기법-list-comprehension&#34;&gt;리스트 내포 표기법 (List comprehension)&lt;/h4&gt;
&lt;p&gt;리스트에 저장할 요소의 규칙 등을 직관적으로 지정하여 리스트를 생성할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;[식 for 요소명 in 리스트]&lt;/code&gt;의 형태로 사용한다. 예시를 살펴보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;이를 활용해 간단하게 2차원 배열을 만들 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;특정 값으로 초기화되는 다차원 리스트의 생성도 &lt;code&gt;range()&lt;/code&gt;와 함께 활용하여 간단하게 해결할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;바로 위의 예시에서는 &lt;code&gt;x&lt;/code&gt;와 &lt;code&gt;y&lt;/code&gt;가 큰 의미가 없지만, 이를 살짝 변형하여 1씩 증가하는 값을 저장할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;y&lt;/code&gt;를 통해 만든 4칸의 리스트의 각 요소에 &lt;code&gt;x&lt;/code&gt;를 통해 만든 3칸의 리스트를 각각 넣고 있다. 따라서 &lt;code&gt;y&lt;/code&gt; 순번에 3을 곱한 후, &lt;code&gt;x&lt;/code&gt;의 순번을 더해 0부터 11까지 값이 차례대로 증가하는 다차원 리스트를 만들 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;이미 만들어진 2차원 배열에 접근하여 값을 변경하는 것도 가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;row&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;25&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;49&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;81&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;121&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;조건식을 추가하여 &lt;code&gt;filter()&lt;/code&gt;처럼 사용할 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;[식 for 요소명 in 리스트 if 조건식]&lt;/code&gt;의 형태로 사용한다. 조건을 충족한 요소에 대해서만 처음 식이 실행된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;[0, 1, 2, 3, 4, 5]&lt;/code&gt; 중에서 &lt;code&gt;x % 2 == 0&lt;/code&gt;을 충족시키는 값만 &lt;code&gt;x&lt;/code&gt;를 통해 리스트에 저장되는 것을 볼 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;6-모듈&#34;&gt;6. 모듈&lt;/h2&gt;
&lt;p&gt;파이썬의 모듈은 C의 라이브러리와 같은 역할을 한다. 필요한 모든 함수나 자료구조를 전부 만들어 쓰는 것은 생산적이지 못하기 때문에, 기존에 정의된 모듈 혹은 사용자 정의 모듈을 가져와서(import) 사용할 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;임포트import&#34;&gt;임포트(Import)&lt;/h4&gt;
&lt;p&gt;특정 모듈을 사용하려면 해당 모듈을 가져와야, 즉, 임포트(Import)해야 한다. 예를 들어, 난수를 생성하려면 random 모듈을 임포트(Import)해야 한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;random&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;위 예시의 &lt;code&gt;randint()&lt;/code&gt; 함수는 random 모듈을 임포트하지 않으면 사용할 수 없다.&lt;/p&gt;
&lt;p&gt;수많은 모듈과 각 모듈에 포함된 다양한 함수가 있지만, 이 단락에서 모두 소개하지 않겠고, 할 수도 없다. (그리고 뇌피셜이지만, &lt;em&gt;그때그때 필요하면 찾아보고 쓰는 게 코딩을 잘 하는 게 아닐까?&lt;/em&gt;)&lt;/p&gt;
&lt;h4 id=&#34;필요한-것만-임포트하기&#34;&gt;필요한 것만 임포트하기&lt;/h4&gt;
&lt;p&gt;전체 모듈을 임포트하는 대신, 해당 모듈에서 필요한 함수만 임포트할 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;from 모듈명 import 함수명&lt;/code&gt;의 형태로 임포트한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;nn&#34;&gt;random&lt;/span&gt; &lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;random&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;randint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;당연하겠지만 이 경우 &lt;code&gt;randint()&lt;/code&gt;를 제외한 random 모듈 내의 다른 함수들은 사용이 불가능하다.&lt;/p&gt;
&lt;h4 id=&#34;__name__&#34;&gt;&lt;code&gt;__name__&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;모듈은 누군가 작성한 파일을 내가 빌려 와서 사용하는 형태이다. 따라서 내가 작성한 파일도 모듈이 될 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt; 변수를 이용하면 어떤 파일이 실행될 때 내가 임포트를 했는지, 아니면 임포트를 당했는지를 알 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt; 변수는 다음 값을 갖는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램이 시작된 파일에서는 &lt;code&gt;__name__&lt;/code&gt; 변수의 값이 &lt;code&gt;__main__&lt;/code&gt;으로 설정된다.&lt;/li&gt;
&lt;li&gt;모듈로서 임포트된 파일에서는 &lt;code&gt;__name__&lt;/code&gt;변수의 값이 해당 모듈명으로 설정된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;따라서 모듈로서 호출된 경우를 구분하기 위해 주로 다음과 같은 형식의 코드를 주로 사용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;kn&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;초기화&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;코드&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;함수&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;및&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;클래스&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;정의&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;전역&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;변수&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;선언&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;등&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;vm&#34;&gt;__name__&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;__name__&lt;/code&gt;변수에 저장된 값이 &lt;code&gt;__main__&lt;/code&gt;인 경우 해당 파일에서 프로그램이 시작된 것이므로 특별한 기능을 수행하도록 설정할 수 있다.&lt;/p&gt;
&lt;p&gt;여기까지 함수와, 함수를 모아 둔 파일인 모듈을 살펴보았다.&lt;/p&gt;
&lt;p&gt;앞서 언급했든 모듈엔 수많은 종류가 있으므로, 추후 다른 내용을 학습하며 새로운 모듈이 나오면 그 때 해당 모듈에 포함된 함수들을 살펴보도록 하겠다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 게임 개발에 필요한 PyGame 모듈에 대해 다뤄볼 예정이다.&lt;/p&gt;
&lt;p&gt;(다음 글에서 계속됩니다.)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>프로세스 (2)</title>
        <link>https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-2/</link>
        <pubDate>Sun, 18 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-2/</guid>
        <description>&lt;h2 id=&#34;pcb-process-control-block&#34;&gt;PCB (Process Control Block)&lt;/h2&gt;
&lt;p&gt;운영체제도 하나의 프로그램이므로, 다양한 정보를 저장하기 위한 자료구조들을 갖고 있다.&lt;/p&gt;
&lt;p&gt;그리고 &lt;strong&gt;프로세스 관리를 위해 프로세스 관련 정보들을 저장하고 있는 자료구조&lt;/strong&gt;가 바로 &lt;strong&gt;PCB&lt;/strong&gt;(Process Control Block)이다. 즉, &lt;strong&gt;프로세스는 운영체제 내에서 프로세스의 정보들을 가지고 있는 자료구조로 표현&lt;/strong&gt;될 수 있다. 따라서 PCB를 Process Descriptor라고 부르기도 한다.&lt;/p&gt;
&lt;p&gt;PCB는 프로세스에 관련된 모든 정보들을 모두 저장하고 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CPU Register : 현재 프로세스가 CPU에서 돌아가고 있을 경우 현재 CPU의 상태는 Register의 값으로 정의될 수 있으므로 관련 값들을 저장&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Process Information&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;PID : Process ID&lt;/li&gt;
&lt;li&gt;PPID : Parent Process ID&lt;/li&gt;
&lt;li&gt;Process Group&lt;/li&gt;
&lt;li&gt;Priority : CPU 할당 우선순위&lt;/li&gt;
&lt;li&gt;Process State : 프로세스 현재 상태&lt;/li&gt;
&lt;li&gt;Signals&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CPU 스케줄링 정보&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메모리 관리 정보&lt;/p&gt;
&lt;p&gt;. . .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실제 리눅스에서는 &lt;code&gt;task_struct&lt;/code&gt;라는 자료구조가 &lt;strong&gt;PCB&lt;/strong&gt;의 역할을 한다. (Linux 3.2.0에서 3248 Byte)&lt;/p&gt;
&lt;h4 id=&#34;xv6-pcb&#34;&gt;XV6 PCB&lt;/h4&gt;
&lt;p&gt;UNIX V6를 ANSI C로 이식(Porting)한 교육용 운영체제 XV6에서는 &lt;code&gt;Proc&lt;/code&gt;이라는 자료구조가 PCB의 역할을 한다.&lt;/p&gt;
&lt;p&gt;PCB의 구조를  살펴보기 전 관련된 몇 가지 자료구조를 살펴보자.&lt;/p&gt;
&lt;h4 id=&#34;context&#34;&gt;Context&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;context&lt;/code&gt; 구조체는 현재 프로세스의 register 정보를 저장하고 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;eip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Index pointer register
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;esp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Stack pointer register
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ebx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Called the base register
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ecx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Called the counter register
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;edx&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Called the data register
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;esi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Source index register
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;edi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Destination index register
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ebp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;	&lt;span class=&#34;c1&#34;&gt;// Stack base pointer register
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;실행 중인 프로세스가 사용하는 레지스터의 값은 지속적으로 변하게 된다. 따라서 레지스터 값을 저장함으로써, 현재 프로세스의 상태를 스냅샷(Snapshot) 찍듯 저장할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;context&lt;/code&gt; 구조체는 다음과 같이 활용 가능하다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;특정 프로세스가 Running 상태에서 Ready 상태로 바뀔 때
&lt;ul&gt;
&lt;li&gt;현재 프로세스 상태를 &lt;code&gt;context&lt;/code&gt; 구조체에 저장&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;해당 프로세스가 다시 Running 상태로 바뀔 때
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;context&lt;/code&gt; 구조체에 저장된 정보를 레지스터에 복사&lt;/li&gt;
&lt;li&gt;기존에 실행하던 상태를 그대로 이어서 실행 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;process-state&#34;&gt;Process State&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;procstate&lt;/code&gt;는 &lt;code&gt;enumerator&lt;/code&gt; 타입으로, 프로세스의 현재 상태를 다음 6가지로 정의하고 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;procstate&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UNUSED&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EMBRYO&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SLEEPING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RUNNABLE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;RUNNING&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ZOMBIE&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;struct-proc&#34;&gt;Struct &lt;code&gt;Proc&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;다음은 &lt;code&gt;Proc&lt;/code&gt; 구조체의 코드이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt; &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;uint&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sz&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                     &lt;span class=&#34;c1&#34;&gt;// Size of process memory (bytes)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;n&#34;&gt;pde_t&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pgdir&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// Page table
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kstack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// Bottom of kernel stack for this process
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;enum&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;procstate&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// Process state
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                     &lt;span class=&#34;c1&#34;&gt;// Process ID
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;proc&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;parent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;// Parent process
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;trapframe&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;c1&#34;&gt;// Trap frame for current syscall
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;     &lt;span class=&#34;c1&#34;&gt;// swtch() here to run process
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;chan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;// If non-zero, sleeping on chan
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;killed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;// If non-zero, have been killed
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ofile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NOFILE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;  &lt;span class=&#34;c1&#34;&gt;// Open files
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;inode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cwd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;// Current directory
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;   &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;// Process name (debugging)
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;앞서 살펴본 &lt;code&gt;context&lt;/code&gt;와 &lt;code&gt;procstate&lt;/code&gt;외에도 pid, parent process, file 등 다양한 정보를 저장하기 위한 데이터가 포함되어 있는 것을 볼 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;process-state-queues&#34;&gt;Process State Queues&lt;/h2&gt;
&lt;p&gt;운영체제는 시스템의 원활한 작동을 위해 모든 프로세스의 상태를 추적할 필요가 있다. 이를 위해 사용하는 자료구조가 바로 프로세스 상태 큐(Process State Queue)이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ready Queue : 현재 Ready 상태인 프로세스들의 PCB를 저장하는 큐
&lt;ul&gt;
&lt;li&gt;Ready Queue에서 Process를  하나 선택하여 CPU를 할당해 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Wait Queue : 특정 이벤트를 기다리는 프로세스들의 PCB를 저장하는 큐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;시스템에 존재하는 모든 프로세스의 PCB들은 현재 상태에 따라 Ready Queue 또는 Wait Queue에 저장되어 있다. 각 프로세스의 상태가 변하게 되면, 저장된 Queue 또한 달라지게 된다.&lt;/p&gt;
&lt;h4 id=&#34;context-switching&#34;&gt;Context Switching&lt;/h4&gt;
&lt;p&gt;CPU가 수행하는 프로세스가 바뀌는 현상이다. 이를 위해서는 다음과 같은 작업들을 수행해야 하므로 오버헤드가 발생한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;기존에 실행하던 프로세스의 상태 정보를 저장하고 새로운 프로세스의 상태 정보를 복구한다.&lt;/li&gt;
&lt;li&gt;메모리 캐시를 비우고(Flush) 다시 불러온다(Reload).&lt;/li&gt;
&lt;li&gt;관련된 다양한 자료구조(테이블, 리스트, etc.)들을 업데이트한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이러한 오버헤드는 하드웨어에 따라 달라진다.&lt;/p&gt;
&lt;p&gt;Context Switch는 &lt;strong&gt;초당 100~1000회&lt;/strong&gt; 정도 수행되므로, Context Switch 오버헤드는 성능에 매우 큰 영향을 미친다.&lt;/p&gt;
&lt;p&gt;다음은 Process A에서 Process B로 Context Switching이 발생하는 과정을 나타낸 것이다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 159; flex-basis: 382px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-2/Context_Switching.png&#34; data-size=&#34;1335x837&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-2/Context_Switching.png&#34;
				srcset=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-2/Context_Switching_hu18035e1c7e6fdd321ffbabfd0dbd7678_308840_480x0_resize_box_2.png 480w, https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-2/Context_Switching_hu18035e1c7e6fdd321ffbabfd0dbd7678_308840_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;1335&#34;
				height=&#34;837&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Context Switching among Kernel, Hardware, Processes&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Context Switching among Kernel, Hardware, Processes&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;간단하게 설명하자면, 다음과 같은 과정을 거쳐 Context Switching이 일어난다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Process A가 실행 상태일 때, Timer Interrupt가 발생한다.&lt;/li&gt;
&lt;li&gt;운영체제(Kernel)는 CPU를 Process A로부터 회수한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switch()&lt;/code&gt; (Context Switching을 수행하는 routine)를 호출한다.
&lt;ul&gt;
&lt;li&gt;Process A의 레지스터 정보를 A의 PCB에 저장한다.&lt;/li&gt;
&lt;li&gt;Process B의 PCB로부터 Process B의 레지스터 정보를 복구한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;하드웨어를 거쳐 Process B를 실행 상태로 변경한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;process-생성&#34;&gt;Process 생성&lt;/h2&gt;
&lt;p&gt;유닉스 운영체제에서의 Process 생성은 &lt;code&gt;fork()&lt;/code&gt;와 &lt;code&gt;exec()&lt;/code&gt;라는 두 시스템 콜을 사용해 2단계로 이루어진다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fork()&lt;/code&gt; : 새로운 프로세스를 생성한다.
&lt;ul&gt;
&lt;li&gt;기존 프로세스를 복제(Clone)하여 새로운 프로세스를 생성한다.&lt;/li&gt;
&lt;li&gt;원본 프로세스를 부모(Parent) 프로세스, 새로 생성된 프로세스를 자식(Child) 프로세스라고 한다.&lt;/li&gt;
&lt;li&gt;모든 프로세스는 부모 프로세스를 갖는다.&lt;/li&gt;
&lt;li&gt;부모 프로세스로부터 대부분의 정보를 상속받는다.
&lt;ul&gt;
&lt;li&gt;fork() 직후에는 PID를 제외하면 거의 모든 정보가 부모 프로세스와 동일하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;부모 프로세스는 자녀 프로세스가 종료될 때까지 기다리거나, 혹은 자신이 원래 수행하던 코드로 바로 돌아갈 수도 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec()&lt;/code&gt; : &lt;code&gt;fork()&lt;/code&gt; 후, 현재 프로세스 이미지를 새로운 프로그램을 로드해 덮어쓴다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;cf. Windows에서는 &lt;code&gt;fork()&lt;/code&gt;와 &lt;code&gt;exec()&lt;/code&gt;을 하나로 합친 &lt;code&gt;CreateProcess()&lt;/code&gt;라는 API를 사용해 프로세스를 생성한다.&lt;/p&gt;
&lt;h4 id=&#34;fork&#34;&gt;&lt;code&gt;fork()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;새로운 PCB를 만들고 초기화한다.&lt;/li&gt;
&lt;li&gt;새로운 Address Space를 만들고, 부모 프로세스의 Address Space를 복사하여 초기화한다.&lt;/li&gt;
&lt;li&gt;그 밖의 부모 프로세스가 사용하던 정보들도 그대로 복사하여 초기화해 준다.&lt;/li&gt;
&lt;li&gt;완성된 PCB를 Ready Queue에 저장한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fork()&lt;/code&gt;는 2번 Return한다.
&lt;ul&gt;
&lt;li&gt;Return to Parent Process : &lt;code&gt;pid&lt;/code&gt; of Child Process&lt;/li&gt;
&lt;li&gt;Return to Child Process : &lt;code&gt;0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Return Value를 보고 어떤 프로세스가 부모인지 구별할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다음 코드를 보자.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// fork.c
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// child
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Child of %d is %d.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getppid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getpid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// parent
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;I am %d. My child is %d.&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;getpid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;fork()&lt;/code&gt;를 수행하면 모든 정보가 복제되므로, 동일한 코드를 실행하는 프로세스가 2개가 된다.&lt;/p&gt;
&lt;p&gt;하지만 &lt;code&gt;fork()&lt;/code&gt;의 Return Value에 따라 조건문의 어느 부분이 실행될 지가 결정된다. 실행 결과를 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gcc -o fork fork.c
$ ./fork
I am 35543. My child is 35544.
Child of 35543 is 35544.
$ ./fork
I am 35545. My child is 35546
Child of 35545 is 35546
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;자식 프로세스와 부모 프로세스가 &lt;code&gt;fork()&lt;/code&gt;의 Return Value에 따라 서로 다른 코드를 실행하는 것을 알 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;exec&#34;&gt;&lt;code&gt;exec()&lt;/code&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;현재 실행중인 프로세스를 중지한다.&lt;/li&gt;
&lt;li&gt;새로운 프로그램을 Disk에서 읽어 와서 해당 프로세스의 Address Space를 덮어쓴다.&lt;/li&gt;
&lt;li&gt;관련된 정보들을 업데이트해 준다.&lt;/li&gt;
&lt;li&gt;완성된 PCB를 Ready Queue에 저장한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exec()&lt;/code&gt;은 새로운 프로세스를 만들지 않는다.
&lt;ul&gt;
&lt;li&gt;기존의 프로세스를 새로운 프로그램의 프로세스로 덮어쓴다.&lt;/li&gt;
&lt;li&gt;따라서 별도의 Return Value가 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;프로세스-계층-구조-process-hierarchy&#34;&gt;프로세스 계층 구조 (Process Hierarchy)&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;fork()&lt;/code&gt; 의 작동 방식에 의해, 모든 프로세스는 부모-자식 관계를 갖게 된다.&lt;/p&gt;
&lt;p&gt;따라서 UNIX 시스템에서는 모든 프로세스를 Tree 구조로 정리할 수 있고, &lt;code&gt;ps&lt;/code&gt;명령을 사용하여 전체 프로세스 리스트를 확인할 수 있다. (Linux도 동일하다.)&lt;/p&gt;
&lt;p&gt;cf. Windows는 별도의 Tree 구조를 가지고 있지 않고, 작업 관리자(Task Manager)를 통해 현재 시스템의 프로세스를 확인할 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;simplified-shell&#34;&gt;Simplified Shell&lt;/h4&gt;
&lt;p&gt;다음은 간단한 형태의 Shell code이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C&#34; data-lang=&#34;C&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cmdline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXLINE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;MAXARGS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;pid_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;getcmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmdline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;sizeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;parsecmd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;cmdline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Parse the command
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buildin_command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;execv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;%s : command not found&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
                    &lt;span class=&#34;n&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;waitpid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다음의 과정을 거쳐 작동한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; : 루프를 돌며 사용자로부터 명령어를 입력받음&lt;/li&gt;
&lt;li&gt;&lt;code&gt;parsecmd&lt;/code&gt; : 입력받은 명령어를 파싱(Parsing)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;if (!builtin_command(argv))&lt;/code&gt; : 입력받은 명령어가 Shell 자체 명령어인 Built-in Command인지 확인
&lt;ul&gt;
&lt;li&gt;만약 Built-in Command이면 그대로 실행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;그렇지 않은 경우 &lt;code&gt;fork()&lt;/code&gt;를 수행하고, 자식 프로세스에서 새로 입력받은 명령어를 수행한다.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;waitpid&lt;/code&gt; : 자식 프로세스의 실행이 종료될 때까지 대기한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;운영체제-구현&#34;&gt;운영체제 구현&lt;/h2&gt;
&lt;h4 id=&#34;모듈화&#34;&gt;모듈화&lt;/h4&gt;
&lt;p&gt;운영체제는 매우 거대한 프로그램이므로 전체를 한번에 다 구현하기가 어렵다. 따라서 각 부분을 작은 모듈로 나누어 구현한다.&lt;/p&gt;
&lt;p&gt;특정 부분의 수정이 필요한 경우 해당 모듈만 수정하면 되도록, 새로운 기능이 필요하면 새로운 모듈을 덧붙여서 구현 가능한 것이 모듈화의 장점이다.&lt;/p&gt;
&lt;h4 id=&#34;policy--mechanism&#34;&gt;Policy &amp;amp; Mechanism&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Policy는 운영체제의 기능을 활용해 무엇을 할 것인지를 결정한다.&lt;/li&gt;
&lt;li&gt;Mechanism은 운영체제가 기능을 어떻게 수행할 것인지를 결정한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;CPU를 예로 들어 살펴보면 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Policy&lt;/th&gt;
&lt;th&gt;Mechanism (How to do?)&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;CPU&lt;/td&gt;
&lt;td&gt;다음에 수행할 프로세스를 어떻게 결정할 것인가?&lt;/td&gt;
&lt;td&gt;어떻게 동시에 여러 프로세스를 실행할 것인가?&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Mechanism은 하나만 존재할 수 있지만, Policy는 여럿 존재할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Policy와 Mechanism을 구분하는 것이 운영체제 설계의 핵심 원칙&lt;/strong&gt;이다.&lt;/li&gt;
&lt;li&gt;Policies는 워크로드에 따라 얼마든지 달라질 수 있고, 누구나 자신이 원하는 방식을 새로 만들어 적용시킬 수 있다.&lt;/li&gt;
&lt;li&gt;Mechanism은 운영체제에서 동작하는 여러 Policies들이 공통적으로 사용하는 방식이다.&lt;/li&gt;
&lt;li&gt;Policy와 Mechanism을 구분함으로써 모듈화된 운영체제를 구현할 수 있고, 유지보수도 간편해진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;앞으로 CPU와 메모리 가상화 등을 다루며 Mechanism과 Policy를 구분하여 살펴볼 것이다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 CPU 가상화의 Mechanism인 Direct Execution에 대해 다룬다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>프로세스 (1)</title>
        <link>https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/</link>
        <pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/</guid>
        <description>&lt;h2 id=&#34;virtualization-가상화&#34;&gt;Virtualization (가상화)&lt;/h2&gt;
&lt;p&gt;가상화는 실제 대상을 가상의 대상으로 바꾸는 것을 의미한다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 129; flex-basis: 310px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/virtual_peach.png&#34; data-size=&#34;765x592&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/virtual_peach.png&#34;
				srcset=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/virtual_peach_hu005ca562b0f176dda443f00f681e8352_273152_480x0_resize_box_2.png 480w, https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/virtual_peach_hu005ca562b0f176dda443f00f681e8352_273152_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;765&#34;
				height=&#34;592&#34;
				loading=&#34;lazy&#34;
				alt=&#34;복숭아를 가상화해보자&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;복숭아를 가상화해보자&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;실제로 존재하는 복숭아(Physical peach)는 하나이다. 그런데 여러  사용자가 이를 원하는 경우, &lt;strong&gt;복숭아를 가상화하여&lt;/strong&gt; 가상의 복숭아(Virtual peach)를 여러 개 만들 수 있다. 그리고 이것들을 복숭아를 원하는 사람들에게 나눠준다.&lt;/p&gt;
&lt;p&gt;가상의 복숭아를 갖고 있는 사람들은 자기만 전용으로 사용하는 복숭아를 갖고 있다는 착각에 빠지는데, 그 이유는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자기가 가지고 있는 가상의 복숭아만 알 수 있다.&lt;/li&gt;
&lt;li&gt;다른 사람들이 존재한다는 사실도 모른다.&lt;/li&gt;
&lt;li&gt;따라서 다른 사람들의 가상의 복숭아를 알 수 없다.&lt;/li&gt;
&lt;li&gt;심지어, 자신의 복숭아가 &lt;strong&gt;가상화되어 있다는 사실도 모른다&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이것이 운영체제가 수행하는 가상화의 기본 아이디어이다.&lt;/p&gt;
&lt;p&gt;그런데 &lt;strong&gt;실제 복숭아는 하나밖에 없는데&lt;/strong&gt;, 어떻게 전용의 복숭아를 가지고 있다는 환상이 유지될까? 다른 사람이 쓰면 다른 누군가는 쓰지 못하지 않을까?&lt;/p&gt;
&lt;p&gt;결론부터 말하자면, &lt;strong&gt;&amp;ldquo;가상의 복숭아&amp;quot;라는 환상&lt;/strong&gt;은 각 사람이 &lt;strong&gt;항상 복숭아를 사용하지 않기 때문에 유지&lt;/strong&gt;될 수 있다.&lt;/p&gt;
&lt;p&gt;각  사람은 자신이 가지고 있는 가상의 복숭아를 잠깐 사용하지만, 나머지 대부분의 시간은 낮잠을 자기도 하고, 다른 일을 하기도 한다.&lt;/p&gt;
&lt;p&gt;운영체제는 중간에서 A라는 사람이 짧은 시간 동안 복숭아를 사용하고 나면 B에게 주고, B가 또 짧은 시간 동안 복숭아를 사용한 후에 C에게 복숭아를 주는 작업을 중간에서 수행한다.&lt;/p&gt;
&lt;p&gt;즉, 각 사람이 복숭아를 사용하지 않을 때는 다른 사람이 사용할 수 있도록 이리저리 옮겨 준다.&lt;/p&gt;
&lt;p&gt;물론 한 사람이 항상 복숭아를 사용하고 있다면 가상의 복숭아라는 환상이 깨지게 되겠지만, 실제로 각 사람이 복숭아를 필요로 하는 시간은 매우 짧기 때문에, 각 사람이 전용의 복숭아를 가지고 있다는 같은 환상을 잘 유지할 수 있다.&lt;/p&gt;
&lt;p&gt;이로부터 알 수 있는 가상화의 특징을 정리해보면 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;각 사람에게 가상의 복숭아를 나눠 준다.&lt;/li&gt;
&lt;li&gt;각 사람은 매우 짧은 시간동안 복숭아를 사용하므로, 자신만의 전용 복숭아를 가지고 있다는 착각에 빠진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;당연하겠지만 실제로는 복숭아 대신 CPU, Memory 등을 가상화해서 제공한다.&lt;/p&gt;
&lt;p&gt;먼저 CPU 가상화를 살펴볼텐데, CPU 가상화를 공부하려면 프로세스에 대해 알아야 한다.&lt;/p&gt;
&lt;h2 id=&#34;process-프로세스&#34;&gt;Process (프로세스)&lt;/h2&gt;
&lt;p&gt;프로세스는 &lt;strong&gt;프로그램이 실행 중인 상태&lt;/strong&gt;를 의미한다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 208; flex-basis: 500px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/OS_Architecture.png&#34; data-size=&#34;1413x678&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/OS_Architecture.png&#34;
				srcset=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/OS_Architecture_hu24fb56ba589354b6da80b9a13fdacd95_272584_480x0_resize_box_2.png 480w, https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/OS_Architecture_hu24fb56ba589354b6da80b9a13fdacd95_272584_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;1413&#34;
				height=&#34;678&#34;
				loading=&#34;lazy&#34;
				alt=&#34;운영체제와 외부 구조&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;운영체제와 외부 구조&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;운영체제(Operating System)은 &lt;strong&gt;하드웨어 자원들을 관리&lt;/strong&gt;하고, 프로세스들이 **시스템 콜(System call)**을 통해 하드웨어 자원을 요청하면 &lt;strong&gt;해당 자원을 가상화하여 프로세스에게 제공&lt;/strong&gt;해 준다.&lt;/p&gt;
&lt;h4 id=&#34;프로세스-작동-과정running-a-process&#34;&gt;프로세스 작동 과정(Running a Process)&lt;/h4&gt;
&lt;p&gt;프로세스는 다음 과정을 반복해서 수행한다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Fetch&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Decode&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Execute&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Update&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;인스트럭션 가져오기&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;가져온 인스트럭션 해석&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;해석한 결과를 실행&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;새로운 인스트럭션 업데이트&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;여러 개의 프로세스를 작동시키고 싶으면 가장 간단하게 사용 가능한 방법은 프로세스마다 CPU를 할당하는 것이다.&lt;/p&gt;
&lt;p&gt;그러나 실행 가능한 프로세스의 수는 수백 가지인데, CPU의 갯수는 멀티코어 환경이라고 하더라도 2자릿수를 넘기기가 힘들다.&lt;/p&gt;
&lt;p&gt;따라서 그 다음으로 생각할 수 있는 방식은 프로세스 간의 **인터리빙(Interleaving, 교차)**이다.&lt;/p&gt;
&lt;p&gt;즉, 프로세스 A의 코드를 실행하다가 일정 시간이 지나면 잠시 멈춘 후 프로세스 B의 코드를 실행하고, 마찬가지로 일정 시간이 지나면 프로세스 C의 코드를 실행하는 것이다.&lt;/p&gt;
&lt;p&gt;인터리빙 방식의 문제는 프로세스 A의 코드에서 프로세스 B의 코드로 직접 이동해야 한다는 점이다. 즉, &lt;strong&gt;전용의 CPU를 사용한다는 환상이 깨진다&lt;/strong&gt;. 다른 프로세스에게 CPU를 직접 양보해야 하기 때문이다.&lt;/p&gt;
&lt;p&gt;운영체제도 일종의 프로그램이므로, 자신의 코드를 가지고 있다. 따라서 위와 같은 인터리빙 방식에서 운영체제를 거치도록 하여 인터리빙을 수행하면 가상화의 환상을 깨뜨리지 않고도 각 프로세스의 코드를 실행할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 247; flex-basis: 594px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/Interleaving.png&#34; data-size=&#34;2081x840&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/Interleaving.png&#34;
				srcset=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/Interleaving_hu435a6b213904d9adb59faf9ac55e62dd_595477_480x0_resize_box_2.png 480w, https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/Interleaving_hu435a6b213904d9adb59faf9ac55e62dd_595477_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;2081&#34;
				height=&#34;840&#34;
				loading=&#34;lazy&#34;
				alt=&#34;왼쪽 : 직접 인터리빙 / 오른쪽 : OS 인터리빙&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;왼쪽 : 직접 인터리빙 / 오른쪽 : OS 인터리빙&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;왼쪽 방식에서는 프로세스 A가 프로세스 B에게 CPU를 직접 양보했다면, 오른쪽 방식에서는 실행 중인 프로세스 A로부터 CPU를 운영체제가 받아서 프로세스 B에게 전달함으로써 가상화를 유지할 수 있다.&lt;/p&gt;
&lt;p&gt;이렇게 CPU의 시간을 잘게 나누어서 각 프로세스에게 나눠 주는 방식을 &lt;strong&gt;Time Sharing&lt;/strong&gt;이라고 하며, 현대 대부분의 운영체제들이 채택하고 있는 방식이다.&lt;/p&gt;
&lt;h4 id=&#34;프로세스란&#34;&gt;프로세스란?&lt;/h4&gt;
&lt;p&gt;앞서 이야기했듯 &lt;strong&gt;프로세스는 실행 중인 프로그램을 의미&lt;/strong&gt;한다.&lt;/p&gt;
&lt;p&gt;객체지향과 비교해서 생각하면 다음과 같은 비유가 가능하다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Static&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Dynamic&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;클래스(Class)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;인스턴스(Instance)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;프로그램&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;프로세스&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;프로세스의 특징은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Protection의 기본적인 단위이다.  프로세스 단위로 자원을 할당하고, 해당 자원에는 다른 프로세스가 간섭할 수 없다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PID&lt;/strong&gt;(Process ID)를 통해 식별할 수 있다.&lt;/li&gt;
&lt;li&gt;프로세스의 동적인 상태를 정의하는, 다음과 같은 정보들을 포함한다.
&lt;ul&gt;
&lt;li&gt;CPU context (Program counter, Stack pointer)&lt;/li&gt;
&lt;li&gt;OS resources (address space, open files, etc.)&lt;/li&gt;
&lt;li&gt;Other information (PID, state, owner, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;프로세스의-실행-과정-process-creation&#34;&gt;프로세스의 실행 과정 (Process Creation)&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;프로그램 코드를 메모리에 로드한다.
&lt;ul&gt;
&lt;li&gt;메모리 내 프로세스별로 할당된 주소 공간에 로드한다.&lt;/li&gt;
&lt;li&gt;메모리에 로드 시, 프로그램의 코드를 한번에 전부 로드하는 것이 아닌 필요한 부분만 그때그때 로드한다(Lazily Load) : 메모리 가상화의 Demand Paging 기법&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;프로그램을 실행하기 위한 런타임 스택을 할당한다.
&lt;ul&gt;
&lt;li&gt;스택에는 지역 변수, 함수의 매개변수, 반환 주소 등이 저장된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;동적 할당을 위한 Heap 공간을 할당한다.
&lt;ul&gt;
&lt;li&gt;프로세스별로 동적인 공간 할당 요청이 있을 경우 Heap 공간에서 메모리를 할당한다.&lt;/li&gt;
&lt;li&gt;C에서는 &lt;code&gt;malloc()&lt;/code&gt;을 사용해 메모리를 할당받고 &lt;code&gt;free()&lt;/code&gt;를 사용해 할당을 해제한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OS에 의해 초기화 작업이 수행된다.
&lt;ul&gt;
&lt;li&gt;모든 프로그램은 기본적으로 3개의 오픈 파일 디스크립터를 만들어 준다.
&lt;ul&gt;
&lt;li&gt;표준 입력, 표준 출력, 표준 에러&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CPU의 제어권이 OS로부터 새로 생성된 프로세스에게 넘어간다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;프로세스의-상태-process-states&#34;&gt;프로세스의 상태 (Process States)&lt;/h4&gt;
&lt;p&gt;프로세스는 다음 3가지 중 하나의 상태를 갖는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;실행 중 (Running) : CPU를 할당받아 실행 중인 상태&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;대기 중 (Ready) : 실행될 준비는 끝냈지만 CPU를 할당받지 못한 상태&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정지 (Blocked) : 모종의 이유로 실행이 잠시 중단된 상태&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;입출력과 같은 오래 걸리는 작업을 수행하는 경우&lt;/li&gt;
&lt;li&gt;사용자 입력과 같은 이벤트를 기다리고 있는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 158; flex-basis: 381px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/Process_States.png&#34; data-size=&#34;1287x810&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/Process_States.png&#34;
				srcset=&#34;https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/Process_States_hu8b45775c9d2ffb836fdbf13eccb0aea7_276731_480x0_resize_box_2.png 480w, https://everimind4.github.io/p/%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-1/Process_States_hu8b45775c9d2ffb836fdbf13eccb0aea7_276731_1024x0_resize_box_2.png 1024w&#34;
				width=&#34;1287&#34;
				height=&#34;810&#34;
				loading=&#34;lazy&#34;
				alt=&#34;프로세스 간 상태 전이 관계도&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;프로세스 간 상태 전이 관계도&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;프로세스는 기본적으로 Ready 상태와 Running 상태를 계속 오가며 실행된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로세스가 처음 생성되면 Ready 상태가 된다.&lt;/li&gt;
&lt;li&gt;CPU를 할당받아 Running 상태가 된다.&lt;/li&gt;
&lt;li&gt;정해진 할당 시간(Time slice)을 모두 사용하면 Ready 상태가 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Running 상태에서 입출력(I/O) 혹은 사용자 Event를 기다려야 하는 경우 Blocked 상태가 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blocked 상태에서 필요한 작업을 다 처리하면 Ready 상태가 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다시 Ready와 Running 두 상태의 전이를 반복한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;linux에서의-프로세스&#34;&gt;Linux에서의 프로세스&lt;/h4&gt;
&lt;p&gt;리눅스 Shell에서 &lt;code&gt;ps ax&lt;/code&gt;명령어를 입력하면 현재 실행 중인 프로세스 목록을 확인할 수 있다.&lt;/p&gt;
&lt;p&gt;PID, 프로세스의 현재 상태 등을 확인할 수 있다. 프로세스의 상태를 나타내는 기호에는 다음과 같은 것들이 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;기호&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;th&gt;상세&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;R&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Running or Runnable&lt;/td&gt;
&lt;td&gt;Running or Ready&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;S&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Sleeping&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;T&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Traced or Stopped&lt;/td&gt;
&lt;td&gt;Blocked&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;D&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Uninterruptible Sleep&lt;/td&gt;
&lt;td&gt;(주로) I/O&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;Z&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Zombie&lt;/td&gt;
&lt;td&gt;*&lt;em&gt;중요&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Zombie 상태는, 프로세스 자체는 종료되었지만 관련 데이터가 아직 삭제되지 않은 상태를 말한다.&lt;/p&gt;
&lt;p&gt;그밖에 위 기호와 함께 표기해 추가적인 정보를 나타내 주는 기호들도 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;기호&lt;/th&gt;
&lt;th&gt;의미&lt;/th&gt;
&lt;th&gt;상세&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;&amp;lt;&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;High-priority task&lt;/td&gt;
&lt;td&gt;높은 우선순위&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;N&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Low-priority task&lt;/td&gt;
&lt;td&gt;낮은 우선순위&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;s&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Session leader&lt;/td&gt;
&lt;td&gt;Shell Program&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Foreground Process Group&lt;/td&gt;
&lt;td&gt;포그라운드 프로세스&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;l&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Multi-threaded&lt;/td&gt;
&lt;td&gt;멀티스레드 프로세스&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;프로세스-종료&#34;&gt;프로세스 종료&lt;/h4&gt;
&lt;p&gt;프로세스는 다음과 같은 경우 종료된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자발적(Voluntary) 종료 : 의도된 종료
&lt;ul&gt;
&lt;li&gt;Normal exit : 프로그램이 끝까지 모두 실행된 상태&lt;/li&gt;
&lt;li&gt;Error exit : 에러가 발생한 경우 코드 중간에 &lt;code&gt;exit()&lt;/code&gt;를 사용해 종료&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;비자발적(Involuntary) 종료 : 의도되지 않은, 시스템에 의한 종료
&lt;ul&gt;
&lt;li&gt;Segmentation fault : 잘못된 메모리에 접근한 경우&lt;/li&gt;
&lt;li&gt;Protection fault : 접근해서는 안 되는 자원에 접근한 경우&lt;/li&gt;
&lt;li&gt;Exceed allocated resource : 할당된 자원을 초과해서 사용한 경우&lt;/li&gt;
&lt;li&gt;Killed by another process : 커널에서 프로그램 실행 도중 &lt;code&gt;^C&lt;/code&gt; (Ctrl + C)를 입력하는 경우 등&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;또한 위에서도 언급했지만, 좀비 프로세스는 종료되고 난 후에도 관련 데이터가 삭제되지 않은 프로세스를 말한다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 프로세스 관련 정보에 대해 알아본다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>운영체제 개요</title>
        <link>https://everimind4.github.io/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B0%9C%EC%9A%94/</link>
        <pubDate>Fri, 16 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EC%9A%B4%EC%98%81%EC%B2%B4%EC%A0%9C-%EA%B0%9C%EC%9A%94/</guid>
        <description>&lt;h2 id=&#34;운영체제의-기능&#34;&gt;운영체제의 기능&lt;/h2&gt;
&lt;p&gt;운영체제는 &lt;strong&gt;프로그램이 잘 실행되도록 돕는 프로그램&lt;/strong&gt;이다. 따라서 다음과 같은 기능들을 갖는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램을 실행하기 쉽도록 해 준다.&lt;/li&gt;
&lt;li&gt;프로그램들이 메모리를 공유할 수 있도록 해 준다.&lt;/li&gt;
&lt;li&gt;프로그램들이 외부 장치들과 정보를 주고받을 수 있도록 해 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;즉, 시스템이 올바르고 효율적으로 동작할 수 있도록 만드는 것이 OS의 역할이다.&lt;/p&gt;
&lt;p&gt;여기서 잠깐 프로그램이 무엇인가에 대해 간단하게 짚고 넘어가자.&lt;/p&gt;
&lt;h4 id=&#34;프로그램이란&#34;&gt;프로그램이란?&lt;/h4&gt;
&lt;p&gt;프로그램은 &lt;strong&gt;CPU가 수행하는 인스트럭션(Instruction, 명령어)들의 목록&lt;/strong&gt;이라고 생각할 수 있다.&lt;/p&gt;
&lt;p&gt;즉, 프로그램을 실행한다는 것은 인스트럭션을 수행하는 것이다.&lt;/p&gt;
&lt;p&gt;따라서 프로그램이 실행될 때는 다음과 같은 과정을 거치게 된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Fetch&lt;/strong&gt; : 메모리에서 인스트럭션을 하나 가져온다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Decode&lt;/strong&gt; : 가지고 온 인스트럭션이 어떤 종류인지를 알아낸다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Execute&lt;/strong&gt; : 인스트럭션을 실제로 수행한다.&lt;/p&gt;
&lt;p&gt;여기까지 완료하면 하나의 인스트럭션을 수행한 것이다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;다음 인스트럭션&lt;/strong&gt;을 찾는다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;프로그램이 실행되고 종료되기까지 이 4개의 과정이 계속 반복된다.&lt;/p&gt;
&lt;p&gt;이러한 과정을 거쳐 프로그램이 실행되는 동안, &lt;strong&gt;운영체제는 프로그램이 원활하게 실행될 수 있도록 환경을 제공&lt;/strong&gt;하는 역할을 한다.&lt;/p&gt;
&lt;p&gt;운영체제의 기능과 역할은 크게 3가지이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Virtualization&lt;/strong&gt; (가상화)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Concurrency&lt;/strong&gt; (병행성)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Persistency&lt;/strong&gt; (지속성)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;지금부터 각각의 개념에 대해 간단하게 살펴보도록 하자.&lt;/p&gt;
&lt;h2 id=&#34;virtualization-가상화&#34;&gt;Virtualization (가상화)&lt;/h2&gt;
&lt;p&gt;운영체제의 가장 중요한 역할 중 하나는 시스템을 &lt;strong&gt;가상화&lt;/strong&gt;하여 프로그램에게 제공하는 것이다.&lt;/p&gt;
&lt;p&gt;구체적으로는 시스템의 물리적 자원(Physical Resource)인 &lt;strong&gt;하드웨어(Hardward)를 프로그램이 사용하기 편리하도록 가상화하여 제공&lt;/strong&gt;하는 것을 의미한다.&lt;/p&gt;
&lt;p&gt;가상화된 형태는 프로그램이 사용하기 편리하다. 실제 하드웨어의 구조 및 복잡한 작동 방식, 하드웨어 공유 시 발생하는 문제 등을 신경쓰지 않아도 되기 때문이다.&lt;/p&gt;
&lt;p&gt;이러한 특징 때문에 운영체제를 &lt;strong&gt;Virtual Machine&lt;/strong&gt;이라고 부르기도 한다.&lt;/p&gt;
&lt;h4 id=&#34;system-call&#34;&gt;System call&lt;/h4&gt;
&lt;p&gt;시스템 자원은 가상화되어 있으므로, 프로그램들은 시스템 자원에 직접 접근할 수 없다. 따라서 프로그램들은 시스템 자원을 사용하려면 운영체제에게 요청해야 한다.&lt;/p&gt;
&lt;p&gt;운영체제에게 시스템 자원을 요청하기 위해 특수한 함수인 &lt;strong&gt;System call&lt;/strong&gt;(시스템 콜)을 사용한다.&lt;/p&gt;
&lt;p&gt;운영체제는 프로그램들이 사용할 수 있는 다양한 시스템 콜을 제공한다.&lt;/p&gt;
&lt;h4 id=&#34;resource-manager&#34;&gt;Resource manager&lt;/h4&gt;
&lt;p&gt;운영체제는 CPU, Memory, Disk 등의 시스템 자원을 (가상화할 뿐만 아니라) 관리하는 역할을 한다.&lt;/p&gt;
&lt;p&gt;여러 프로그램들이 동시에 실행될 수 있도록 &lt;strong&gt;CPU를 공유&lt;/strong&gt;하기도 하고, 각 프로그램이 사용할 수 있도록 &lt;strong&gt;메모리 및 디스크를 공유&lt;/strong&gt;해 주기도 한다.&lt;/p&gt;
&lt;p&gt;즉, OS가 여러 프로그램들 사이에서 시스템 자원을 분배하는 &lt;strong&gt;중재자&lt;/strong&gt; 역할을 한다.&lt;/p&gt;
&lt;h4 id=&#34;cpu-가상화&#34;&gt;CPU 가상화&lt;/h4&gt;
&lt;p&gt;실행하고자 하는 프로그램의 개수에 비해 CPU의 개수는 너무나 적다.&lt;/p&gt;
&lt;p&gt;하지만 CPU가 단 하나만 존재하는 경우에도, CPU 가상화를 통해 여러 프로그램이 적은 수의 CPU를 동시에 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;OS는 각 프로그램들에게 &lt;strong&gt;자신만의 전용 CPU를 가지고 있다는 환상을 제공&lt;/strong&gt;해 준다. 즉, 하나의 프로세스로 여러 프로그램을 실행하더라도 각 프로그램들은 자신만의 CPU를 가지고 있는 것처럼 작동한다.&lt;/p&gt;
&lt;h4 id=&#34;메모리-가상화&#34;&gt;메모리 가상화&lt;/h4&gt;
&lt;p&gt;CPU와 마찬가지로 실제 물리적인 메모리를 여러 프로그램이 사용할 수 있게 해 주는 것이 메모리 가상화이다.&lt;/p&gt;
&lt;p&gt;실제 메모리는 정보를 저장 가능한 바이트(Byte)들로 이루어진 저장 공간이다. 즉, **바이트의 배열(An array of Bytes)**로 생각할 수 있다. 각 바이트에는 고유한 번호가 존재하고, 이를 **주소(Address)**라고 한다. 이 주소를 가지고 메모리를 읽고 쓸 수 있다.&lt;/p&gt;
&lt;p&gt;OS는 각 프로그램들에게 자신만의 전용 메모리를 가지고 있다는 환상을 제공해 준다.&lt;/p&gt;
&lt;p&gt;하지만 각 프로그램에는 &lt;strong&gt;실제 주소(Physical Address)가 아닌 가상 주소(Virtual Address)가 제공&lt;/strong&gt;된다.&lt;/p&gt;
&lt;p&gt;따라서 현재 실행 중인 프로그램들이 모두 동일한 주소에 접근하는 것 처럼 보이는 경우에도, 실제로는 다른 주소에 접근하게 된다.&lt;/p&gt;
&lt;p&gt;OS가 중간에서 가상 주소를 실제 주소로 연결해 주기 때문에, 이러한 경우에도 프로그램들은 문제 없이 작동할 수 있다.&lt;/p&gt;
&lt;h2 id=&#34;concurrency-병행성&#34;&gt;Concurrency (병행성)&lt;/h2&gt;
&lt;p&gt;병행성은 여러 프로그램들이 동시에 실행되어야 하기 때문에 발생하는 특징이다.&lt;/p&gt;
&lt;p&gt;다음 코드를 통해 병행성의 특징을 알 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// thread.c
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#include&lt;/span&gt; &lt;span class=&#34;cpf&#34;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;
&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loops&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;worker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;arg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;loops&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// Exception Handler
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;n&#34;&gt;loops&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;atoi&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Initial Value : %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;pthread_t&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Pthread_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;worker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Pthread_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;worker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Pthread_join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Pthread_join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    
    &lt;span class=&#34;n&#34;&gt;printf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Final Value : %d&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;counter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;worker&lt;/code&gt; 함수는 전역 변수인 &lt;code&gt;counter&lt;/code&gt;에 저장된 값을 1씩 증가시키는 함수이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;worker&lt;/code&gt; 함수를 &lt;code&gt;main&lt;/code&gt; 함수 내에서 멀티스레드(Multi-thread)를 활용해 동시에 1000번씩 작동시킨다고 생각해 보자.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gcc -o thread thread.c -Wall -pthread
$ ./thread 1000
Initial Value : 0
Final Value : 2000
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;당연한 결과이다. 하지만 &lt;code&gt;loops&lt;/code&gt;의 값이 커지게 되면 이상한 현상이 발생한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ./thread 100000
Initial Value : 0
Final Value : 106296
$ ./thread 100000
Initial Value : 0
Final Value : 107258
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;예상대로라면 &lt;strong&gt;200000&lt;/strong&gt;이 출력되어야 하지만, 그에 훨씬 못 미치는 값이 출력되는 것을 볼 수 있다. 더욱 심각한 것은, 조건 분기 등이 없음에도 &lt;strong&gt;매번 값이 다르게 출력&lt;/strong&gt;된다는 사실이다. 이는 대표적인 병행성 문제이다.&lt;/p&gt;
&lt;p&gt;왜 이런 현상이 발생하는지는 내부 인스트럭션의 구조를 보면 알 수 있다. &lt;code&gt;worker&lt;/code&gt; 함수는 최소 3개의 인스트럭션으로 이루어져 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Load&lt;/strong&gt; : 메모리에서 &lt;code&gt;counter&lt;/code&gt; 변수의 값을 읽는다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Increment&lt;/strong&gt; : 해당 변수의 값을 1 증가시킨다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt; : 증가시킨 값을 다시 원래 위치에 저장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;문제는 두 스레드를 통해 실행되는 이 인스트럭션들이 서로 중첩되는 경우이다. 각 스레드의 인스트럭션들은 개별 스레드 내부에서는 순서대로 실행되지만, 멀티스레드의 경우 서로 끼어들 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;스레드&lt;/th&gt;
&lt;th&gt;인스트럭션&lt;/th&gt;
&lt;th&gt;수행하는 기능&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;counter&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Load&lt;/td&gt;
&lt;td&gt;counter 변수를 불러온다&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Load&lt;/td&gt;
&lt;td&gt;counter 변수를 불러온다&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;0&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Increment&lt;/td&gt;
&lt;td&gt;값을 1 증가시킨다 (&lt;code&gt;0&lt;/code&gt; → &lt;code&gt;1&lt;/code&gt;)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;0&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;Store&lt;/td&gt;
&lt;td&gt;증가시킨 값 &lt;code&gt;1&lt;/code&gt;을 counter 변수에 저장한다&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;strong&gt;1&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Increment&lt;/td&gt;
&lt;td&gt;값을 1 증가시킨다 (&lt;code&gt;0&lt;/code&gt; → &lt;code&gt;1&lt;/code&gt;)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;2&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;Store&lt;/td&gt;
&lt;td&gt;증가시킨 값 &lt;code&gt;1&lt;/code&gt;을 counter 변수에 저장한다&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;em&gt;1&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;실제로 개별 스레드에서 한 번씩, 반복문이 총 2회 실행되었지만 내부 인스트럭션들이 중첩되는 바람에 의도와 다르게 실행되었음을 알 수 있다.&lt;/p&gt;
&lt;p&gt;이를 방지하기 위해서는 공유된 자원을 읽어와서 값을 증가시키고 저장하기까지의, 위에 나열한 최소 3개의 &lt;strong&gt;인스트럭션들이 한 묶음으로(Atomic) 실행&lt;/strong&gt;되어야 한다.&lt;/p&gt;
&lt;h2 id=&#34;persistency-지속성&#34;&gt;Persistency (지속성)&lt;/h2&gt;
&lt;p&gt;일반적으로 메인 메모리로 사용하는 DRAM은 휘발성(volatile) 저장 장치이다. 휘발성은 전원을 차단하면 저장된 정보가 삭제되는 특징을 말한다.&lt;/p&gt;
&lt;p&gt;따라서 데이터를 보존하기 위해 하드웨어나 소프트웨어의 도움을 받는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;하드웨어(Hardware) : 입출력 장치인 하드 디스크 드라이브(HDD), 솔리드-스테이트 드라이브(SDD)&lt;/li&gt;
&lt;li&gt;소프트웨어(Software) : 운영체제의 파일 시스템(File System)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;운영체제는 시스템에 연결된 HDD나 SSD와 같은 저장 공간을 추상화하여 제공하며, 저장된 파일을 관리하는 **파일 시스템(File System)**을 갖고 있다.&lt;/p&gt;
&lt;p&gt;프로그램이 파일을 열거나 수정해 저장하는 등의 파일 관련 작업을 수행하려면 시스템 콜을 요청해야 한다.&lt;/p&gt;
&lt;p&gt;지속성(Persistency)은 디렉토리와 파일로 추상화된 공간을 통해 데이터를 보존하는 것을 말한다.&lt;/p&gt;
&lt;p&gt;운영체제가 갖는 지속성(Persistency)의 특징은 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로그램의 요청을 받아 어느 위치에 있는 파일을 수정하거나 새로운 파일을 작성할 지를 결정한다.&lt;/li&gt;
&lt;li&gt;파일시스템은 파일 작성 중 오류가 발생한 경우 &lt;strong&gt;Journaling&lt;/strong&gt;이나 &lt;strong&gt;Copy-on-Write&lt;/strong&gt;등의 방식을 사용해 오류를 복구한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;운영체제-설계-목표&#34;&gt;운영체제 설계 목표&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Abstraction : 추상화 및 가상화를 통해 사용 편의성을 더한다.&lt;/li&gt;
&lt;li&gt;High Performance : 성능이 뛰어나야 한다.좋아야 한다. 하드웨어에 OS가 설치된 후 그 위에 다른 모든 프로그램들이 설치되기 때문에, OS의 성능이 비효율적인 경우 다른 모든 프로그램들의 성능이 저하된다.&lt;/li&gt;
&lt;li&gt;Protection (Isolation) : &lt;strong&gt;프로그램 간의 간섭을 방지&lt;/strong&gt;해야 한다. 특정 프로그램이 다른 프로그램의 데이터를 훼손하거나 덮어쓰는 경우를 막을 수 있어야 한다.&lt;/li&gt;
&lt;li&gt;Reliability : OS는 &lt;strong&gt;항상 작동&lt;/strong&gt;해야 한다. OS가 작동을 멈추면 전체 프로그램들도 작동할 수 없게 되고, 컴퓨터를 사용할 수 없게 된다.&lt;/li&gt;
&lt;li&gt;Others : Energy-efficiency, Security, Mobility, . . .&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;앞으로 운영체제의 3요소인 Virtualization, Concurrency, Persistency에 관한 내용을 주제별로 다룰 예정이다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>제어문 (1)</title>
        <link>https://everimind4.github.io/p/%EC%A0%9C%EC%96%B4%EB%AC%B8-1/</link>
        <pubDate>Mon, 05 Apr 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EC%A0%9C%EC%96%B4%EB%AC%B8-1/</guid>
        <description>&lt;img src="https://everimind4.github.io/p/%EC%A0%9C%EC%96%B4%EB%AC%B8-1/cover.png" alt="Featured image of post 제어문 (1)" /&gt;&lt;h2 id=&#34;1-들여쓰기indentation&#34;&gt;1. 들여쓰기(Indentation)&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;C에서는 코드 실행 단위인 블록을 구분하기 위해 중괄호&lt;code&gt;{ }&lt;/code&gt;를 사용하고, 들여쓰기는 가독성을 증진시키는 데만 사용되는 개념이었다.&lt;/p&gt;
&lt;p&gt;하지만 파이썬에서는 &lt;strong&gt;들여쓰기 수준으로 코드 블록을 구분&lt;/strong&gt;한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;cc-style&#34;&gt;C/C++ Style&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-C++&#34; data-lang=&#34;C++&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;조건문&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;err&#34;&gt;명령&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   	&lt;span class=&#34;err&#34;&gt;명령&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;python-style&#34;&gt;Python Style&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;명령&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;명령&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;C와 비교했을 때, Python의 문법적 차이는 다음와 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;조건문을 괄호&lt;code&gt;( )&lt;/code&gt;로 싸지 않고 콜론&lt;code&gt;:&lt;/code&gt;을 조건문 뒤에 적는 것으로 간단하게 사용한다.&lt;/li&gt;
&lt;li&gt;명령문의 끝에 세미콜론&lt;code&gt;;&lt;/code&gt;을 적지 않는다. (적어도 상관은 없음)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;코드 블록을 감싸는 중괄호&lt;code&gt;{ }&lt;/code&gt;를 생략&lt;/strong&gt;한다. 대신 들여쓰기(Indentation)로 코드 블록을 구분한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그리고 마지막 항목인 중괄호 생략이 바로 파이썬의 가장 큰 특징이다. 자세한 내용은 조건식에서 추가적으로 다룬다.&lt;/p&gt;
&lt;h2 id=&#34;2-조건식&#34;&gt;2. 조건식&lt;/h2&gt;
&lt;p&gt;조건식으로 입력되는 부울값에 따라 제어문에 의해 실행되는 코드가 달라진다(코드의 흐름이 달라진다).&lt;/p&gt;
&lt;h4 id=&#34;비교연산자&#34;&gt;비교연산자&lt;/h4&gt;
&lt;p&gt;두 개의 값을 비교하고 부울값을 반환한다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;연산자&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;반환값&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;A == B&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;두 값이 서로 &lt;strong&gt;같으면&lt;/strong&gt; &lt;code&gt;True&lt;/code&gt;, 아니면 &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;A != B&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;두 값이 서로 &lt;strong&gt;다르면&lt;/strong&gt; &lt;code&gt;True&lt;/code&gt;, 아니면 &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;A &amp;lt; B&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A가 B보다 &lt;strong&gt;작으면&lt;/strong&gt; &lt;code&gt;True&lt;/code&gt;, 아니면 &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;A &amp;lt;= B&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A가 B보다 &lt;strong&gt;작거나 같으면&lt;/strong&gt; &lt;code&gt;True&lt;/code&gt;, 아니면 &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;A &amp;gt; B&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A가 B보다 &lt;strong&gt;크면&lt;/strong&gt; &lt;code&gt;True&lt;/code&gt;, 아니면 &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;A &amp;gt;= B&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A가 B보다 &lt;strong&gt;크거나 같으면&lt;/strong&gt; &lt;code&gt;True&lt;/code&gt;, 아니면 &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;A in B&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;A가 B(리스트 or 튜플)에 &lt;strong&gt;포함된(B의 요소 중 A가 존재)&lt;/strong&gt; 경우 &lt;code&gt;True&lt;/code&gt;, 아니면 &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;부울연산자&#34;&gt;부울연산자&lt;/h4&gt;
&lt;p&gt;부울연산자의 피연산자로 비교연산자 등의 조건식을 조합하여 사용할 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;A&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;B&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;AND&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;OR&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;not&lt;/code&gt;은 입력값과 반대되는 부울값을 반환한다. 이를 정리하면 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자&lt;/th&gt;
&lt;th&gt;반환값&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;조건식1 and 조건식2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;조건 1과 조건 2가 모두&lt;/strong&gt; &lt;code&gt;True&lt;/code&gt;이면 &lt;code&gt;True&lt;/code&gt;, 아니면 &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;조건식1 and 조건식2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;조건 1과 조건 2중 하나만&lt;/strong&gt; &lt;code&gt;True&lt;/code&gt;여도 &lt;code&gt;True&lt;/code&gt;, 아니면 &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;not 조건식&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;조건식이 &lt;code&gt;True&lt;/code&gt;이면 &lt;code&gt;False&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;이면 &lt;code&gt;True&lt;/code&gt; &lt;strong&gt;반대되는 부울값&lt;/strong&gt;을 반환한다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;부울-이외의-데이터형&#34;&gt;부울 이외의 데이터형&lt;/h4&gt;
&lt;p&gt;위 2개 연산자의 경우 부울값을 반환하므로 조건식으로 사용할 수 있지만, 부울값 이외의 값도 조건식으로 사용할 수 있다. 그대로 사용하는 것은 아니고, &lt;strong&gt;부울값으로 데이터형을 변환&lt;/strong&gt;한 후 조건식으로 사용한다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;데이터형&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;code&gt;False&lt;/code&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;수치&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;0&lt;/code&gt;(&lt;code&gt;0.0&lt;/code&gt;)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;0&lt;/code&gt; 이외의 값&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;문자열&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;빈 문자열 &lt;code&gt;&#39;&#39;&lt;/code&gt;, &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;비어있지 않은 문자열&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;리스트, 튜플&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;비어있는 리스트&lt;code&gt;[ ]&lt;/code&gt;, 튜플&lt;code&gt;( )&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;요소가 하나라도 있는 경우&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;bool()&lt;/code&gt; 함수를 사용해 변환 결과를 알아볼 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;426&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;2.718&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({})&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, Python!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;3-조건문&#34;&gt;3. 조건문&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;코드 블록을 콜론&lt;code&gt;:&lt;/code&gt;과 들여쓰기만으로 구분한다는 점을 제외하면 C와 거의 동일하다.&lt;/p&gt;
&lt;p&gt;들여쓰기로 코드 블록을 구분하는 것을 구체적으로 살펴보기 위해 각 경우의 코드 예시를 살펴본다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;if--else&#34;&gt;if: ~ else:&lt;/h4&gt;
&lt;p&gt;조건문이 &lt;code&gt;True&lt;/code&gt;일 경우 &lt;code&gt;if&lt;/code&gt; 바로 뒤 블록 내의 코드를 실행하고, &lt;code&gt;False&lt;/code&gt;일 경우 &lt;code&gt;else&lt;/code&gt; 뒤 블록의 코드를 실행한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    	&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
	    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;동일한 &lt;code&gt;if&lt;/code&gt;문을 실행했음에도 조건식의 값에 따라 다른 결과가 나타나는 것을 볼 수 있다.&lt;/p&gt;
&lt;h4 id=&#34;if-단독-사용&#34;&gt;if: 단독 사용&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;False&lt;/code&gt;인 경우를 고려할 필요가 없는 경우 &lt;code&gt;if&lt;/code&gt;문을 단독으로 사용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subject&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Korean&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Math&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;English&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    	&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;subject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Korean&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Math&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;English&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;
    	&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;subject&lt;/code&gt; 리스트에는 요소가 존재하므로 해당요사가 출력되고, &lt;code&gt;score&lt;/code&gt;리스트에는 요소가 없으므로 아무런 일도 일어나지 않는다.&lt;/p&gt;
&lt;h4 id=&#34;if-elif-else&#34;&gt;if: elif: else&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;elif&lt;/code&gt;는 &lt;code&gt;else if&lt;/code&gt;를 줄인 형태이다. 사용법은 C와 동일하므로 추가로 예시를 살펴보지는 않는다.&lt;/p&gt;
&lt;h2 id=&#34;4-반복문&#34;&gt;4. 반복문&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;파이썬의 반복문은 C와 동일하게 &lt;code&gt;while&lt;/code&gt;과 &lt;code&gt;for&lt;/code&gt;가 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;while&#34;&gt;while&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;조건문&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;명령&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;명령&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;err&#34;&gt;명령&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이런 형태의 코드의 경우 조건문이 &lt;code&gt;True&lt;/code&gt;에서 &lt;code&gt;False&lt;/code&gt;가 되기 전까지 명령1, 명령2를 반복해서 수행하다 &lt;code&gt;while&lt;/code&gt;루프가 종료되면 명령3을 실행하게 된다.&lt;/p&gt;
&lt;h4 id=&#34;for&#34;&gt;for&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;python의 &lt;code&gt;for&lt;/code&gt;문은 C에 비해 매우 직관적이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;for&lt;/code&gt;문의 기본적인 구조는 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;변수&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;리스트&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;튜플&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;문자열&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;등&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;명령&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;err&#34;&gt;명령&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
    &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;즉, &lt;code&gt;in&lt;/code&gt;뒤의 데이터형에서 요소를 하나씩 꺼내어(문자열의 경우 문자를 하나씩) 변수에 넣고, 명령을 처리한다.&lt;/p&gt;
&lt;p&gt;이렇게 특정 요소에 차례대로 접근 가능한 대상을 &lt;strong&gt;이터러블(Iterable) 객체&lt;/strong&gt;라고 부른다.&lt;/p&gt;
&lt;p&gt;복잡한 응용도 가능하다. 변수 위치에 꼭 단일 변수만 와야 하는 것은 아니고, 특정 자료형도 위치할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)]:&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;next&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;next&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;next&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;next&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;오른쪽 2차원 리스트의 각 요소인 튜플이 자동으로 왼쪽 튜플의 요소에 언팩되어 들어간다.&lt;/p&gt;
&lt;h4 id=&#34;for--range&#34;&gt;for ~ range()&lt;/h4&gt;
&lt;p&gt;기존의 C에서처럼 숫자를 증가시키는 반복문 형태도 있다. &lt;strong&gt;&lt;code&gt;range()&lt;/code&gt;함수와 함께 사용&lt;/strong&gt;한다. &lt;code&gt;range()&lt;/code&gt; 함수는 번호가 들어 있는 이터러블 객체를 반환하는 함수이다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;range(숫자)&lt;/code&gt;는 0에서부터 (해당 숫자-1)까지의 정수들을 요소로 하는 리스트(튜플)처럼 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;range()&lt;/code&gt;의 인수는 1개부터 3개까지 입력 가능한데, 각각 다음 의미를 갖는다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;인수의 개수&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;1번째 인수&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;2번째 인수&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;3번째 인수&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;1개 입력&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;마지막 숫자&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;2개 입력&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;시작 숫자&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;마지막 숫자&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;X&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;3개 입력&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;시작 숫자&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;마지막 숫자&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;증가폭&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;인수를 1개만 입력하는 경우 0부터 시작하는 것으로 인식한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;각 경우를 직접 출력해보면 다음과 같은 결과를 볼 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    	&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;j&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    	&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;j&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;k&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;range&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;):&lt;/span&gt;
    	&lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;k&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;14&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;break-continue&#34;&gt;break, continue&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;C에서와 동일하게 사용할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;break&lt;/code&gt; : 반복 도중 반복문을 강제로 벗어난다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;continue&lt;/code&gt; : 반복 도중 반복문의 맨 앞으로 돌아간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;C와 차이가 없으므로 구체적인 설명은 생략한다.&lt;/p&gt;
&lt;p&gt;다음 글에서는 파이썬에서 함수를 정의하는 방법과, 기존에 정의된 함수 모음인 모듈에 대해 다룰 예정이다.&lt;/p&gt;
&lt;p&gt;(다음 글에서 계속됩니다.)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>데이터형과 데이터 구조 (3)</title>
        <link>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-3/</link>
        <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-3/</guid>
        <description>&lt;img src="https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-3/cover.png" alt="Featured image of post 데이터형과 데이터 구조 (3)" /&gt;&lt;h2 id=&#34;7-관련-함수들&#34;&gt;7. 관련 함수들&lt;/h2&gt;
&lt;h4 id=&#34;len&#34;&gt;len&lt;/h4&gt;
&lt;p&gt;리스트나 튜플 내의 요소 개수를 반환하는 함수이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;11&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;대상 요소가 무엇이든 전체 개수만 반환하므로, 2차원 이상의 리스트 혹은 튜플의 경우에는 다음과 같은 결과를 확인할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;fibonacci&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;13&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;21&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;34&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;55&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;89&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;144&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;233&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;377&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;610&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;987&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fibonacci&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;len&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;fibonacci&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;copy&#34;&gt;copy&lt;/h4&gt;
&lt;p&gt;리스트를 복제하는 (리스트) 메소드이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C에서는 Shallow copy(얕은 복사)와 Deep copy(깊은 복사)를 구별한다. C에서는 특히 Dangling pointer의 발생을 방지하려면 이 둘의 차이에 대해 잘 이해해야 하는데, 파이썬에도 이 둘의 차이를 구분한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그냥 대입하는 방식으로 리스트를 복사하면 얕은 복사가 일어난다. 다음 코드를 보면 문제가 있음을 알 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;같은 리스트를 참조하기 때문에 이와 같은 문제가 발생한다. C에서는 직접 또다른 메모리 공간을 할당받는 등의 방법을 사용하지만, 파이썬에서는 &lt;code&gt;copy&lt;/code&gt; 함수로 이와 같은 문제를 해결한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;copy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이를 통해 &lt;code&gt;copy&lt;/code&gt; 메소드는 서로 다른 리스트를 참조하도록 만들 수 있고, 얕은 복사가 아닌 깊은 복사가 수행 가능함을 알 수 있다.&lt;/p&gt;
&lt;p&gt;리스트를 복제하고 싶을 때 &lt;code&gt;copy&lt;/code&gt; 메소드를 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;단, 튜플은 값을 변경할 수 없으므로 &lt;code&gt;copy&lt;/code&gt; 메소드를 사용할 수 없다.&lt;/p&gt;
&lt;h4 id=&#34;in&#34;&gt;in&lt;/h4&gt;
&lt;p&gt;어떠한 값이 리스트나 퓨틀 내에 존재하는지 확인하기 위한 함수이다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subjects&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Korean&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;English&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Math&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Science&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Math&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subjects&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Music&amp;#34;&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;subjects&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;알고 싶은 값 in 리스트(or 튜플) &lt;/code&gt;의 형태로 사용한다. 값이 포함되어 있으면 &lt;code&gt;True&lt;/code&gt;, 그렇지 않으면 &lt;code&gt;False&lt;/code&gt;가 반환된다.&lt;/p&gt;
&lt;h4 id=&#34;index&#34;&gt;index&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;in&lt;/code&gt;함수는 단순히 포함 여부를 확인할 수 있다면, &lt;code&gt;index&lt;/code&gt; 메소드는 요소의 위치를 알려 준다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weekdays&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Mon&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Tue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Wed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Thu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Fri&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Sat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Sun&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weekdays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Tue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;weekdays&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;index&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Fri&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;요소를 찾을 수 없는 경우에는 &lt;strong&gt;에러&lt;/strong&gt;가 발생한다.&lt;/p&gt;
&lt;h4 id=&#34;sort-vs-sorted&#34;&gt;sort vs sorted&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;sorted&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sorted&lt;/code&gt;는 함수이다. 인수로 주어진 리스트나 튜플을 정렬한 후 복사본을 반환한다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;원래 리스트의 요소 순서는 변하지 않는다&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;sort&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sort&lt;/code&gt;는 (리스트) 메소드이다. 해당 리스트를 정렬하고, 반환 값은 없다.&lt;/p&gt;
&lt;p&gt;즉, &lt;strong&gt;해당 리스트의 요소들이 실제로 순서가 바뀌어 정렬&lt;/strong&gt;된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;print&#34;&gt;print&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;print&lt;/code&gt;는 인수로 주어진 정보를 콘솔에 출력하는 함수이다.&lt;/p&gt;
&lt;p&gt;콘솔 출력 함수인 &lt;code&gt;print&lt;/code&gt;는 튜플&lt;code&gt;( )&lt;/code&gt;과 조합하여 다양한 방식으로 사용할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;%&lt;/code&gt; 연산자&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C에서는 &lt;code&gt;printf()&lt;/code&gt; 함수 내에 1번째 매개변수로 형식지정자(ex. 정수 &lt;code&gt;%d&lt;/code&gt;, 문자 &lt;code&gt;%c&lt;/code&gt;, 실수 &lt;code&gt;%f&lt;/code&gt;)를 포함하는 문자열을 넣고, 2번째 매개변수로 각 형식지정자에 해당하는 변수를 &lt;code&gt;,&lt;/code&gt;로 구분하여 입력한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;파이썬에서는 문자열 내에 &lt;code&gt;%s&lt;/code&gt;(문자열 형식), &lt;code&gt;%d&lt;/code&gt;(정수형) 등의 서식을 삽입하고, 해당 문자열 뒤에 &lt;code&gt;%&lt;/code&gt; 연산자, 그리고 그 뒤에 튜플 형식으로 출력할 데이터를 배치한다.&lt;/p&gt;
&lt;p&gt;문자열 지정 형식은 C와 거의 동일하다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;문자열&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;10진수&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;16진수&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;부동소수&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%s&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%d&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%x&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;%f&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;제 이름은 &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%s&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;입니다. 저는 &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;cm입니다.&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;홍길동&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;185&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;제 이름은 홍길동입니다. 저는 185cm입니다.&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;당연하지만 사전에 튜플을 선언하고 사용할 수도 있다. (오히려 이 경우가 좀 더 일반적인 것 같다.)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;수학 : &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;점, 영어 : &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;%d&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;점&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;수학 : 96점, 영어 : 88점&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;지정 형식과 &lt;strong&gt;다른 데이터형을 입력하는 경우 에러가 발생&lt;/strong&gt;하므로 형식 지정 및 값 입력 시에 주의를 요한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;.format()&lt;/code&gt; 메소드&lt;/p&gt;
&lt;p&gt;&lt;code&gt;%&lt;/code&gt; 연산자를 사용하는 방식과 비교하면 기본적으로 2가지 차이가 있다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;데이터를 삽입하고 싶은 곳에 &lt;code&gt;%d&lt;/code&gt;등의 형식 대신 &lt;code&gt;{ }&lt;/code&gt;을 사용&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;print&lt;/code&gt;에 인수(매개변수)로 전달하는 대신 해당 자료형의 메소드 형태로 호출&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;%&lt;/code&gt; 연산자와 비교하면 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;수학 : {}점, 영어 : {}점&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]))&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;수학 : 96점, 영어 : 88점&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러나 &lt;code&gt;{ }&lt;/code&gt;내에 번호를 지정하거나 이름을 붙이는 방식으로도 사용할 수 있다!&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;수학 : {1}점, 영어 : {0}점&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;수학 : 88점, 영어 : 96점&amp;#34;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;수학 : {수학}점, 영어 : {영어}점&amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;format&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;수학&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;96&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;영어&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;88&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;s2&#34;&gt;&amp;#34;수학 : 96점, 영어 : 88점&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이 밖에도 C에서와 유사하게 서식 문자열을 사용해 자릿수 지정, 좌/우 정렬, 패딩을 주는 등의 다양한 서식 지정 등이 가능하다(고 한다).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;8-주석comment&#34;&gt;8. 주석(Comment)&lt;/h2&gt;
&lt;p&gt;다른 수많은 언어에서도 사용되는 개념으로, 간단하게 말하면 프로그램에 관한 개발자의 메모이다.&lt;/p&gt;
&lt;p&gt;python에서는 기본적으로 1행짜리 주석만 지원한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 이 행은 주석입니다.&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;# 이 행도 주석입니다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러나 여러 행에 걸친 문자열 &lt;code&gt;&#39;&#39;&#39; &#39;&#39;&#39;&lt;/code&gt; 또는 &lt;code&gt;&amp;quot;&amp;quot;&amp;quot; &amp;quot;&amp;quot;&amp;quot;&lt;/code&gt;기호를 개행과 함께 사용해 여러 행 주석을 작성할 수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;여기부터 주석으로 볼 수 있습니다.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;이 행도 주석이라고 볼 수 있고,
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;원한다면 계속 주석을 작성할 수 있습니다.
&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그러나 이는 여러 행에 걸쳐 문자열을 작성하는 방법으로, 정석적인 사용 방식은 아니다.&lt;/p&gt;
&lt;h2 id=&#34;9-줄바꿈&#34;&gt;9. 줄바꿈&lt;/h2&gt;
&lt;p&gt;코드를 작성하다보면 필요 이상으로 길어질 수도 있다.&lt;/p&gt;
&lt;p&gt;이러한 경우 백슬래시 &lt;code&gt;\&lt;/code&gt;를 사용해 코드를 여러 줄에 걸쳐 작성 가능하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;this_is_test_variable&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; \
						&lt;span class=&#34;n&#34;&gt;real&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;ow&#34;&gt;or&lt;/span&gt; \
    					&lt;span class=&#34;n&#34;&gt;just_test&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;리스트나 튜플, 딕셔너리의 요소를 구분하기 위한 개행은 백슬래시를 삽입하지 않아도 된다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;n&#34;&gt;weekdays&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Mon&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;Tue&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;Wed&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;Thu&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;Fri&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;Sat&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;s2&#34;&gt;&amp;#34;Sun&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;여기까지 데이터형과 데이터 구조를 정리해보았다.&lt;/p&gt;
&lt;p&gt;다음 챕터에서는 프로그래밍 언어의 꽃~~(개인적인 생각입니다)~~인 제어문에 대해 정리할 예정이다.&lt;/p&gt;
&lt;p&gt;(다음 글에서 계속됩니다.)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>데이터형과 데이터 구조 (2)</title>
        <link>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/</link>
        <pubDate>Mon, 22 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/</guid>
        <description>&lt;img src="https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/cover.png" alt="Featured image of post 데이터형과 데이터 구조 (2)" /&gt;&lt;h2 id=&#34;4-데이터형&#34;&gt;4. 데이터형&lt;/h2&gt;
&lt;p&gt;파이썬의 기본적인 데이터형은 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;종류&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;예약어&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;상세&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;예시&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;정수&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;int&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;소수점이 없음&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;4&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, &lt;code&gt;6&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;실수&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;float&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;소수점이 있음&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;3.14&lt;/code&gt;, &lt;code&gt;2.71&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;문자열(String)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;문자열의 나열&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;&#39;everimind4&#39;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;부울(Boolean)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;논리값을 저장&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;1-숫자&#34;&gt;1. 숫자&lt;/h4&gt;
&lt;p&gt;숫자를 저장하기 위한 변수는 다른 언어들과 마찬가지로 2종류가 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정수형 : 정수 값을 저장, 소수점이 없다.&lt;/li&gt;
&lt;li&gt;실수형 : 실수 값을 저장, 소수점이 있고, 부동소수형이라고도 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;C와의 차이점 : 예약어로 변수의 데이터형을 지정할 필요 없이 그냥 값을 저장하면 자동으로 지정된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;그리고 다음과 같은 규칙이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;같은 데이터형끼리 계산하면 기본적으로 같은 데이터형이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정수끼리 나눗셈을 하면 실수형이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;정수와 실수형을 서로 계산하면 결과는 실수형이 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;2-문자열&#34;&gt;2. 문자열&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;C와의 차이점 : 문자(char)형 변수는 없고 문자열(string)만 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;문자열은 &lt;code&gt;&#39; &#39;&lt;/code&gt; 또는 &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;로 감싸서 만든다.&lt;/p&gt;
&lt;p&gt;그 이유는, &lt;code&gt;&#39;&lt;/code&gt;&lt;strong&gt;나&lt;/strong&gt; &lt;code&gt;&amp;quot;&lt;/code&gt;&lt;strong&gt;가 포함된 문자열을 저장하기 위해서&lt;/strong&gt;이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C에서는 &lt;code&gt;\&#39;&lt;/code&gt; 또는 &lt;code&gt;\&amp;quot;&lt;/code&gt;와 같이 해당 기호 앞에 백슬래시(&lt;code&gt;\&lt;/code&gt;)를 적어 주는 방식으로 정규표현식을 사용해 이와 같은 문제를 해결하였다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;Hi, my name is &amp;quot;Alan Choi&amp;quot;.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;위 문장을 저장하려면 어떻게 해야 할까? &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;를 사용하면 &lt;code&gt;is &lt;/code&gt;까지만 저장하라는 의미가 되어 버릴 것이다. 이런 경우를 방지하기 위해 &lt;code&gt;&#39; &#39;&lt;/code&gt;와 &lt;code&gt;&amp;quot; &amp;quot;&lt;/code&gt;의 2가지 형태를 지원한다.&lt;/p&gt;
&lt;h2 id=&#34;5-형변환&#34;&gt;5. 형변환&lt;/h2&gt;
&lt;p&gt;데이터형은 서로 형변환이 가능하다.&lt;/p&gt;
&lt;p&gt;특정한 경우 변환 시 에러가 발생하는 것을 제외하면, 기본적으로 모든 자료형 간의 상호 변환이 가능하다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C와의 차이점 : C에서는 자체 문법으로 명시적(explicit) 혹은 묵시적(implicit) 방식으로 형변환을 했지만, 파이썬은 &lt;strong&gt;데이터형의 예약어를 이름으로 갖는 내장 함수를 사용&lt;/strong&gt;해 형변환을 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;1-정수로-변환&#34;&gt;1. 정수로 변환&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;int(변환할 값)&lt;/code&gt;함수를 사용해 값을 변환한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-4&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;실수형은 소숫점 이하를 버린다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;는 1, &lt;code&gt;False&lt;/code&gt;는 0으로 변환된다.&lt;/li&gt;
&lt;li&gt;문자열은 읽는 것처럼 변환해 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;무슨 말이냐 하면, 2번째 줄의 코드 &lt;code&gt;int(&amp;quot;-4&amp;quot;)&lt;/code&gt;는 문자열을 정수로 변환한 것인데, 액면가(?) 그대로 인식해 사람이 읽는 것처럼 값으로 변환해 주는 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;그렇다면 이런 코드를 실행하면 어떻게 될까?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, python!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다음과 같은 &lt;strong&gt;에러가 발생&lt;/strong&gt;한다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 507; flex-basis: 1219px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture01.PNG&#34; data-size=&#34;960x189&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture01.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture01_huee4f835e14086be59441d50066b37ebb_11078_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture01_huee4f835e14086be59441d50066b37ebb_11078_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;960&#34;
				height=&#34;189&#34;
				loading=&#34;lazy&#34;
				alt=&#34;문자열은 항상 정수로 변환될까?&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;문자열은 항상 정수로 변환될까?&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;2-실수로-변환&#34;&gt;2. 실수로 변환&lt;/h4&gt;
&lt;p&gt;정수형과 마찬가지로, &lt;code&gt;float(변환할 값)&lt;/code&gt; 함수를 사용해 값을 변환한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;7.0&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;-4.26&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;4.26&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;1.0&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;실수형과 크게 다르지 않은 결과를 보인다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;정수형은 소수점 이하를 &lt;code&gt;.0&lt;/code&gt;으로 저장한다.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;True&lt;/code&gt;는 1.0, &lt;code&gt;False&lt;/code&gt;는 0.0으로 변환된다.&lt;/li&gt;
&lt;li&gt;문자열은 읽는 것처럼 변환해 준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;그리고 (예상했겠지만) 다음과 같은 문자열 변환은 실수형과 마찬가지로 에러를 반환한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, python!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;figure style=&#34;flex-grow: 516; flex-basis: 1238px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture02.PNG&#34; data-size=&#34;960x186&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture02.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture02_hu6bc48a0eafabe5e1a291411080a3f72b_10947_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-2/capture02_hu6bc48a0eafabe5e1a291411080a3f72b_10947_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;960&#34;
				height=&#34;186&#34;
				loading=&#34;lazy&#34;
				alt=&#34;실수형도 에러가 발생한다.&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;실수형도 에러가 발생한다.&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;3-문자열로-변환&#34;&gt;3. 문자열로 변환&lt;/h4&gt;
&lt;p&gt;문자열로 변환하려면 &lt;code&gt;str(변환할 값)&lt;/code&gt;함수를 사용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;4&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.22&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;-3.22&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;True&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;False&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;변환 결과가 전부 &lt;code&gt;&#39; &#39;&lt;/code&gt;로 감싸진 문자열이다.&lt;/p&gt;
&lt;h4 id=&#34;4-부울형으로-변환&#34;&gt;4. 부울형으로 변환&lt;/h4&gt;
&lt;p&gt;부울형으로 변환하려면 &lt;code&gt;bool(변환할 값)&lt;/code&gt;함수를 사용한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;3.22&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mf&#34;&gt;0.0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Hello, python!&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;True&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;bp&#34;&gt;False&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;0, 0.0, 빈 문자열은 &lt;code&gt;False&lt;/code&gt;가 된다.&lt;/li&gt;
&lt;li&gt;그 이외의 값은 전부 &lt;code&gt;True&lt;/code&gt;가 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;6-리스트-튜플-딕셔너리&#34;&gt;6. 리스트, 튜플, 딕셔너리&lt;/h2&gt;
&lt;p&gt;파이썬을 제대로 사용하려면 반드시 이해하고 있어야 하는 핵심적인 자료형들이다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;리스트
&lt;ul&gt;
&lt;li&gt;0개 이상의 요소가 나열(Sequence)된 자료형&lt;/li&gt;
&lt;li&gt;요소의 추가 및 삭제, 덮어쓰기가 가능(&lt;strong&gt;mutable&lt;/strong&gt;)하다.&lt;/li&gt;
&lt;li&gt;요소를 &lt;code&gt;[ ]&lt;/code&gt;로 감싸서 만든다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;튜플
&lt;ul&gt;
&lt;li&gt;0개 이상의 요소가 나(Sequence)열된 자료형&lt;/li&gt;
&lt;li&gt;한 번 만들어지고 나면 변경이 불가능하다(&lt;strong&gt;immutable&lt;/strong&gt;).&lt;/li&gt;
&lt;li&gt;요소를 &lt;code&gt;( )&lt;/code&gt;로 감싸서 만든다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;딕셔너리
&lt;ul&gt;
&lt;li&gt;키(Key)와 값(Value)의 쌍으로 이루어진 자료형&lt;/li&gt;
&lt;li&gt;키(Key)는 인덱스(Index) 역할을 하며, &lt;strong&gt;다른 키(Key)와 중복될 수 없다&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;값(Value)은 키에 연결되며, 다른 값(Value)과 중복될 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;C와의 차이점&lt;/p&gt;
&lt;p&gt;리스트와 튜플은 C의 &amp;lsquo;배열(Array)&amp;lsquo;과 사용법이나 특징이 거의 동일하다. 리스트는 수정 가능한 배열, 튜플은 수정 불가능한 배열로 보아도 무방하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;어차피 동일하다면, 값을 수정할 수 없는 튜플이 무슨 의미가 있는가?&lt;/em&gt; 라는 생각이 들 수도 있다.&lt;/p&gt;
&lt;p&gt;그러나 리스트에 비해 메모리를 적게 소비하고, 데이터를 실수로라도 변경할 수 없다는 점 등에서 차이가 난다.&lt;/p&gt;
&lt;p&gt;결국 적재적소에 잘 사용하는 것이 중요하다.&lt;/p&gt;
&lt;h4 id=&#34;1-리스트&#34;&gt;1. 리스트&lt;/h4&gt;
&lt;p&gt;리스트는 0개 이상의 요소를 &lt;code&gt;,&lt;/code&gt;로 구분하여 &lt;code&gt;[ ]&lt;/code&gt;를 사용해 선언한다.&lt;/p&gt;
&lt;p&gt;요소는 어떤 데이터형도 가능하다. 숫자, 문자, 부울뿐만 아니라 &lt;strong&gt;리스트, 튜플, 딕셔너리도 가능&lt;/strong&gt;하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Months&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;January&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;February&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;December&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Friends&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Alan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Crystal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Sally&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffees&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Americano&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Espresso&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Latte&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Macchiato&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Einspanner&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;특정 값을 참조하려면 리스트명 뒤에 &lt;code&gt;[번호]&lt;/code&gt;를 붙이며, 값을 변경할 수도 있다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;번호는 0부터 시작&lt;/strong&gt;한다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Months&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;March&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffees&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;Einspanner&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Friends&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Alan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Crystal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sally&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;append()&lt;/code&gt;메소드를 사용해 리스트 맨 끝에 요소를 추가할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffees&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Cappuccino&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffees&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Americano&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Espresso&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Latte&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Macchiato&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Einspanner&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Cappucchino&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;insert()&lt;/code&gt;메소드를 사용해 지정한 위치에 요소를 추가할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Friends&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;insert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;No-Face&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Friends&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Alan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Crystal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;No-Face&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sally&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;del&lt;/code&gt; 명령어를 사용해 리스트의 요소를 삭제할 수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;del&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffees&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Coffees&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Americano&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Latte&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Macchiato&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Einspanner&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Cappucchino&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;del&lt;/code&gt;은 &lt;strong&gt;메소드가 아니라 파이썬 문법 내의 명령어&lt;/strong&gt;이다. 따라서, &lt;code&gt;Coffees.del(...)&lt;/code&gt;과 같은 방식으로 사용할 수 없다. 자세한 부분은 추후 클래스 챕터에서 다룬다.&lt;/p&gt;
&lt;h4 id=&#34;2-튜플&#34;&gt;2. 튜플&lt;/h4&gt;
&lt;p&gt;튜플은 0개 이상의 요소를 &lt;code&gt;,&lt;/code&gt;로 구분하여 선언한다. &lt;code&gt;( )&lt;/code&gt;&lt;strong&gt;를 사용하지 않고도 선언 가능&lt;/strong&gt;하지만, 튜플임을 명확히 나타내려면 &lt;code&gt;( )&lt;/code&gt;로 감싸 선언하는 편이 명확하다.&lt;/p&gt;
&lt;p&gt;보통 고정된 개수의 값을 포함하는 정보를 튜플에 묶어서 저장한다.&lt;/p&gt;
&lt;p&gt;본 교재의 목표는 게임 제작이다. 게임에서는 2차원상의 위치정보(x좌표, y좌표)를 저장할 필요가 있다.&lt;/p&gt;
&lt;p&gt;이와 같이 고정된 개수의 변수를 묶어서 저장하고 관리할 때는 튜플이 적합하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;값을 변경할 수 없으므로 리스트의 &lt;code&gt;append()&lt;/code&gt;, &lt;code&gt;insert()&lt;/code&gt;, &lt;code&gt;del&lt;/code&gt;등은 사용할 수 없다.&lt;/p&gt;
&lt;h5 id=&#34;튜플에는-독특한-사용법이-있다&#34;&gt;튜플에는 독특한 사용법이 있다.&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;언팩(Unpack)&lt;/strong&gt; : 하나의 튜플을 여러 변수에 대입하는 것&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position_x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position_y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position_x&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;40&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;position_y&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;position&lt;/code&gt;이라는 이름의 튜플에 저장된 값이 &lt;code&gt;position_x&lt;/code&gt;와 &lt;code&gt;position_y&lt;/code&gt;에 나뉘어 저장된 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;이를 응용하면 다음 작업도 가능하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;y&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;이는 마치 튜플의 값이 바뀐 것처럼 보이지만, 사실은 다음과 같은 과정을 거치게 된다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;(y, x)가 3, 4으로 언팩된다.&lt;/li&gt;
&lt;li&gt;새로운 튜플 (x, y)가 선언되고, 3, 4으로 초기화된다.&lt;/li&gt;
&lt;li&gt;x = 3, y = 4라는 값을 출력한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;상기한 대로, &lt;strong&gt;튜플의 값은 변화시킬 수 없다&lt;/strong&gt;. 하지만 이는 튜플에 저장된 값을 수정하는 것이 아니라, &lt;strong&gt;새로 선언된 튜플을 초기화하는 값으로 기존 튜플의 언팩을 사용한 것&lt;/strong&gt;이다!&lt;/p&gt;
&lt;h4 id=&#34;3-딕셔너리&#34;&gt;3. 딕셔너리&lt;/h4&gt;
&lt;p&gt;말 그대로 사전처럼 쓸 수 있는 데이터 구조이다.&lt;/p&gt;
&lt;p&gt;리스트와 튜플에서는 숫자로 특정 값을 찾을 수 있었지만, 딕셔너리에서는 &amp;lsquo;키(Key)&amp;lsquo;로 &amp;lsquo;값(Value)&amp;lsquo;을 찾을 수 있다.&lt;/p&gt;
&lt;p&gt;선언 방법은 다음과 같다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    	&lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Smith&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    	&lt;span class=&#34;s2&#34;&gt;&amp;#34;Age&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    	&lt;span class=&#34;s2&#34;&gt;&amp;#34;Sex&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;M&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    	&lt;span class=&#34;s2&#34;&gt;&amp;#34;Height&amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;176&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Age&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;35&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sex&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Height&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;176&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;s1&#34;&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Age&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;36&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Profile&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Name&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Age&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;36&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sex&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Height&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;176&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;{ }&lt;/code&gt;로 감싸고, &lt;code&gt;(Key) : (Value)&lt;/code&gt;형태로 데이터를 작성한다. 키-값 쌍을 여러 개 저장하고 싶으면 &lt;code&gt;,&lt;/code&gt;로 구분한다.&lt;/p&gt;
&lt;p&gt;키와 값은 임의의 데이터형을 모두 사용할 수 있지만 일반적으로 키에는 문자열을 사용한다.&lt;/p&gt;
&lt;p&gt;딕셔너리의 요소를 참조하고자 할 때는 리스트/튜플과는 다르게 &lt;code&gt;[]&lt;/code&gt; 내에 &lt;strong&gt;번호가 아닌 키 값을 지정&lt;/strong&gt;한다.&lt;/p&gt;
&lt;p&gt;지금까지의 내용을 정리하면 다음과 같다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;리스트&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;튜플&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;사전&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;선언법&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;[ ]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;( )&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;{ }&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;데이터 구조&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;나열(Sequence)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;나열(Sequence)&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;K-V 쌍 (Dictionary)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;참조 방식&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;변수명[번호]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;변수명[번호]&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;&lt;code&gt;변수명[키]&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;특징&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;수정 가능함&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;수정 불가함&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;순서가 없음&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;4-다차원-리스트튜플&#34;&gt;4. 다차원 리스트(튜플)&lt;/h4&gt;
&lt;p&gt;앞서 한 번 언급한 적 있지만, &lt;strong&gt;리스트나 튜플은 또 다른 리스트나 튜플을 원소로 가질 수도 있다&lt;/strong&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;C에서도 배열을 비슷한 방식으로 사용할 수 있다.&lt;/p&gt;
&lt;p&gt;배열의 원소가 배열인 경우를 2차원 배열이라고 부른다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;또한, 튜플의 원소가 리스트이거나, 리스트의 원소가 튜플일 수도 있다.&lt;/p&gt;
&lt;p&gt;이런 사용 방식에는 다음과 같은 특징이 따라오게 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;리스트의 원소가 튜플인 경우 해당 튜플이 쉽게 다른 것으로 대체될 수 있다.&lt;/li&gt;
&lt;li&gt;튜플의 원소가 리스트인 경우 해당 리스트의 값을 수정할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;각 자료형을 사용하는 이점이 흐려지는 느낌이 들기 때문에, 내 생각에는 이런 형태는 지양하는 편이 나을 듯 하다.&lt;/p&gt;
&lt;p&gt;마지막으로 예시를 하나만 살펴보자.&lt;/p&gt;
&lt;p&gt;학생 3명의 이름을 저장한 튜플, 학생 3명의 개인 성적을 저장한 튜플이 있다고 하자. 이 2개의 튜플을 요소로 갖는 또 다른 튜플을 다음과 같이 선언할 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Alan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Crystal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Sally&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;85&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;score&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Alan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Crystal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sally&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;85&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3번째 학생인 &lt;code&gt;&#39;Sally&#39;&lt;/code&gt;의 성적은 &lt;code&gt;score[2]&lt;/code&gt;로도 조회가 가능하지만, &lt;code&gt;data[0][2]&lt;/code&gt;로도 조회할 수 있다. &lt;code&gt;data[0]&lt;/code&gt;에 저장된 요소가 &lt;code&gt;score&lt;/code&gt;이기 때문이다!&lt;/p&gt;
&lt;p&gt;위의 예시에서는 각각 튜플을 미리 선언한 후, 해당 튜플의 이름을 새로운 튜플의 요소로 넣었지만 전체를 직접 작성하는 것도 가능하다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;Alan&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Crystal&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Sally&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;85&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Alan&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Crystal&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Sally&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;85&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;97&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;90&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;그리고 책에는 추가적인 예시로 틱택토 게임을 리스트의 리스트를 사용해 나타낼 수 있는 방법에 대해서도 소개하고 있었는데, 해당 부분은 생략하기로 한다.&lt;/p&gt;
&lt;p&gt;원래 이번 글에 챕터의 모든 내용을 정리하려 했으나 생각보다 길어지는 관계로, 리스트 및 튜플에 관련된 함수들은 다음 포스팅에서 다루기로 한다.&lt;/p&gt;
&lt;p&gt;(다음 글에서 계속됩니다.)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>데이터형과 데이터 구조 (1)</title>
        <link>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/</link>
        <pubDate>Mon, 15 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/</guid>
        <description>&lt;img src="https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/cover.png" alt="Featured image of post 데이터형과 데이터 구조 (1)" /&gt;&lt;h2 id=&#34;1-연산&#34;&gt;1. 연산&lt;/h2&gt;
&lt;h4 id=&#34;11-기본-연산자&#34;&gt;1.1 기본 연산자&lt;/h4&gt;
&lt;p&gt;코딩을 조금이라도 공부해 본 사람은 알겠지만, 파이썬에서는 여타 수많은 프로그래밍 언어와 마찬가지로 다양한 연산자를 지원하고 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:center&#34;&gt;&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;수학에서의 기호&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;파이썬에서의 기호&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;덧셈&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;뺄셈&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;곱셈&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;×&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:center&#34;&gt;나눗셈&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;÷&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;/&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;주의할 점은, 자료형(정수형, 실수형, &amp;hellip;)에 따라 계산 방식이 조금씩 다를 수 있다는 것이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;또, Python IDLE Shell에서는 파이썬 코드를 입력하면 실행 결과가 바로 출력되는 것을 볼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 362; flex-basis: 869px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture01.PNG&#34; data-size=&#34;960x265&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture01.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture01_hu6142e893ab4f3b3035ffd2b56ef10dc1_10214_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture01_hu6142e893ab4f3b3035ffd2b56ef10dc1_10214_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;960&#34;
				height=&#34;265&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Python IDLE Shell :: 사칙연산&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Python IDLE Shell :: 사칙연산&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;그리고 맨 아래 계산 &lt;code&gt;(4 * 2) / 6&lt;/code&gt;을 보면 알 수 있겠지만, 일반적인 수학적 표현에서와 마찬가지로 괄호&lt;code&gt;( )&lt;/code&gt;를 이용해 계산의 우선순위를 지정할 수 있다.&lt;/p&gt;
&lt;p&gt;사칙연산 이외에도 여러 가지 연산자를 사용할 수 있다.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;연산자 종류&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;기호&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;나눗셈의 나머지 구하기&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;%&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;나눗셈의 몫 구하기&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;//&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;지수(거듭제곱) 구하기&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;**&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 446; flex-basis: 1071px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture02.PNG&#34; data-size=&#34;960x215&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture02.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture02_hucf88f40d78bd41d34a52d9fee90a0583_8994_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%98%95%EA%B3%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B5%AC%EC%A1%B0-1/capture02_hucf88f40d78bd41d34a52d9fee90a0583_8994_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;960&#34;
				height=&#34;215&#34;
				loading=&#34;lazy&#34;
				alt=&#34;Python IDLE Shell :: 몫/나머지, 지수 계산&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;Python IDLE Shell :: 몫/나머지, 지수 계산&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;일반적인 나눗셈이 아닌 정수 나눗셈의 경우 몫과 나머지를 각각 %, // 연산자를 사용하여 계산한다.&lt;/li&gt;
&lt;li&gt;파이썬에서는 거듭제곱을 계산할 때 ** 연산자를 사용하여 (밑) ** (지수) 형태로 나타낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;몫과 나머지를 한 번에 구하는 &lt;code&gt;divmod()&lt;/code&gt; 함수도 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;divmod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;26&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;2-변수&#34;&gt;2. 변수&lt;/h2&gt;
&lt;p&gt;프로그래밍에서 변수는 값을 저장하고, 저장된 값을 변경할 수 있다는 특징이 있다.&lt;/p&gt;
&lt;p&gt;파이썬의 변수 사용법도 다른 언어와 크게 다르지 않다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;6&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;b&lt;/span&gt;
&lt;span class=&#34;mf&#34;&gt;2.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;다른 언어들과 마찬가지로 변수명을 정할 때는 몇 가지 규칙이 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;알파벳 대소문자, 숫자, 언더바(&lt;code&gt;_&lt;/code&gt;)만 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;숫자는 맨 앞에 올 수 없다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예약어(reserved word)는 변수명이 될 수 없다.&lt;/p&gt;
&lt;p&gt;ex. &lt;code&gt;if&lt;/code&gt; &lt;code&gt;for&lt;/code&gt; &lt;code&gt;return&lt;/code&gt; . . .&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위 예시를 보면 알 수 있듯, 예약어는 특정 프로그래밍 언어 문법에서 이미 용도가 지정된 단어를 말한다.&lt;/p&gt;
&lt;p&gt;그리고 이쯤에서 한 마디 덧붙이자면, 책을 그대로 옮기는 듯한, 그러니까 일종의 아카이빙을 하는 느낌이 들기 시작했다.&lt;/p&gt;
&lt;p&gt;그래서 지금부터는 &lt;strong&gt;새롭게 배우게 된 내용을 정리&lt;/strong&gt;하고, 이미 &lt;strong&gt;알고 있는 내용은 간단하게 요약&lt;/strong&gt;하고 넘어가는 식으로 공부하기로 했다. 다른 프로그래밍 언어를 배우는 과정에서 이미 학습한 내용을 굳이 또 정리할 필요는 없기도 하고, 무엇보다도 현재 방식대로 진행하면 &lt;strong&gt;진도가 너무 느리다&lt;/strong&gt;. 어쨌든 이제부터는 빠르게 진행해보기로 결정!&lt;/p&gt;
&lt;h2 id=&#34;3-함수&#34;&gt;3. 함수&lt;/h2&gt;
&lt;p&gt;지금까지 여러 연산자들을 살펴보았다.&lt;/p&gt;
&lt;p&gt;지금 살펴보는 &lt;strong&gt;함수&lt;/strong&gt;는 이런 연산자들과 또 다른 함수들을 결합하여 &lt;strong&gt;특정 기능을 수행&lt;/strong&gt;하도록 만든 것이다.&lt;/p&gt;
&lt;p&gt;다른 언어들과 마찬가지로, 파이썬의 함수도 &lt;strong&gt;함수명 뒤에 괄호 &lt;code&gt;( )&lt;/code&gt;를 붙여 실행&lt;/strong&gt;한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수명(인수1, 인수2, &amp;hellip; )
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;인수&lt;/strong&gt; : 함수에 전달되는 값&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;반환값&lt;/strong&gt; : 함수로부터 돌아오는 값&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;예를 들어 각각 인수 2개를 입력받아, 인수 2개를 더한 결과를 반환하는 &lt;code&gt;sum&lt;/code&gt;이라는 함수와, 인수 2개 중 더 큰 값을 반환하는 &lt;code&gt;max&lt;/code&gt;라는 함수가 있다고 하자. 그러면 다음과 같은 결과를 볼 수 있다.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;8&lt;/span&gt;
&lt;span class=&#34;o&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;mi&#34;&gt;4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;max&lt;/code&gt;는 파이썬에 내장되어 있는 함수이고, &lt;code&gt;sum&lt;/code&gt;은 &lt;code&gt;+&lt;/code&gt; 연산자의 기능을 함수로 만든 것인데, 이런식으로 함수를 직접 만드는 방법은 아마 나중에 함수 파트에서 자세히 배우지 않을까 싶다.&lt;/p&gt;
&lt;p&gt;그리고 파이썬은 &lt;strong&gt;객체지향&lt;/strong&gt; 언어이다. 즉, 객체에 딸린 함수들이 존재하고, **메소드(Method)**라고 부른다.&lt;/p&gt;
&lt;p&gt;일반적인 함수와 메소드의 차이는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;함수 : 함수의 이름만 써서 원할 때 호출할 수 있다.&lt;/li&gt;
&lt;li&gt;메소드 : 객체와 메소드 명을 모두 써야 하고, 객체가 존재해야만 호출할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 부분도 마찬가지로 자세한 내용은 추후 객체 파트가 나온다면 학습하지 않을까 싶다.&lt;/p&gt;
&lt;p&gt;(다음 글에서 계속됩니다.)&lt;/p&gt;
</description>
        </item>
        <item>
        <title>시작하기</title>
        <link>https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</link>
        <pubDate>Wed, 10 Mar 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/</guid>
        <description>&lt;img src="https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/cover.png" alt="Featured image of post 시작하기" /&gt;&lt;h3 id=&#34;교재-소개&#34;&gt;교재 소개&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;파이썬을 공부하고자 좋은 교재가 없는지 찾아보다, 기초 문법도 학습할 수 있고 개인 프로젝트도 직접 만들어 볼 수 있는 교재를 발견하였다. 바로 &lt;a class=&#34;link&#34; href=&#34;https://www.aladin.co.kr/shop/wproduct.aspx?ItemId=186485278&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;게임으로 배우는 파이썬&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;https://everimind4.github.io/cover.jpg&#34; alt=&#34;게임으로 배우는 파이썬&#34;  /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;본 교재는 1부와 2부로 구성되어 있다.
&lt;ul&gt;
&lt;li&gt;1부에서는 파이썬의 기초 문법에 대해 학습&lt;/li&gt;
&lt;li&gt;2부에서는 학습한 내용을 기초로 하여 직접 고전 게임을 만들어보는 프로젝트를 진행&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;따라서 해당 교재를 공부한 내용과 프로젝트를 수행한 결과물을 본 블로그 및 Github Repository에 업로드 할 예정이다!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;1-파이썬python-소개&#34;&gt;1. 파이썬(Python) 소개&lt;/h3&gt;
&lt;h4 id=&#34;11-라이브러리&#34;&gt;1.1 라이브러리&lt;/h4&gt;
&lt;p&gt;파이썬은 문법이 간단해 배우기 쉽지만, 그것만으로는 할 수 있는 일이 제한적이다.&lt;/p&gt;
&lt;p&gt;따라서 목적에 맞는 라이브러리를 로드해 사용한다.&lt;/p&gt;
&lt;p&gt;대표적인 라이브러리의 종류는 다음과 같다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;NumPy&lt;/strong&gt; : 수치 계산&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SciPy&lt;/strong&gt; : 과학 기술 계산&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PIL&lt;/strong&gt; : 영상처리&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tkinter&lt;/strong&gt; : GUI(그래픽 유저 인터페이스)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Soup&lt;/strong&gt; : HTML 정보 수집(스크래핑)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;PyGame&lt;/strong&gt; : 게임 제작&lt;/li&gt;
&lt;li&gt;파일을 읽고 쓰거나 네트워크 작업에 관련된 라이브러리 등의 &lt;strong&gt;표준 라이브러리&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;기타 수많은 &lt;strong&gt;3rd Party&lt;/strong&gt; 라이브러리&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이처럼 다양한 라이브러리들이 많은데, 이 책은 게임을 만드는 것을 목표로 하고 있으므로 PyGame은 무조건 사용할 것 같고, 나중에 다른 라이브러리도 사용하게 될 지 모를 일이다.&lt;/p&gt;
&lt;h4 id=&#34;12-설치&#34;&gt;1.2 설치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Python 3 설치 : Windows 사용자는 아나콘다 혹은 파이썬을 설치할 것 (현재 최신 버전 : 3.9.2)&lt;/li&gt;
&lt;li&gt;PyGame 라이브러리 다운로드&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;나는 아나콘다를 제외하고 파이썬만 &lt;a class=&#34;link&#34; href=&#34;https://www.python.org/downloads/windows/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;여기&lt;/a&gt;서 다운받아 설치하였다.&lt;/p&gt;
&lt;p&gt;설치 완료 후 명령 프롬프트를 열어 &lt;code&gt;pip install pygame&lt;/code&gt; 명령어를 입력한다.&lt;/p&gt;
&lt;p&gt;마찬가지로 설치가 완료되면, &lt;strong&gt;파이썬&lt;/strong&gt;을 실행해 &lt;code&gt;import pygame&lt;/code&gt; 명령어로 설치 여부를 확인한다.&lt;/p&gt;
&lt;p&gt;&lt;figure style=&#34;flex-grow: 583; flex-basis: 1399px&#34;&gt;
		&lt;a href=&#34;https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/capture01.PNG&#34; data-size=&#34;758x130&#34;&gt;&lt;img src=&#34;https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/capture01.PNG&#34;
				srcset=&#34;https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/capture01_hu450ee7010b532a40b5fddad8da76df80_5442_480x0_resize_box_2.PNG 480w, https://everimind4.github.io/p/%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0/capture01_hu450ee7010b532a40b5fddad8da76df80_5442_1024x0_resize_box_2.PNG 1024w&#34;
				width=&#34;758&#34;
				height=&#34;130&#34;
				loading=&#34;lazy&#34;
				alt=&#34;이런 메시지가 출력되면 성공(인 것 같다)&#34;&gt;
		&lt;/a&gt;
		
		&lt;figcaption&gt;이런 메시지가 출력되면 성공(인 것 같다)&lt;/figcaption&gt;
		
	&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;MacOS 설치 방법은 생략하도록 하겠다(찾아보면 금방 나오고 별로 다르지도 않다).&lt;/p&gt;
&lt;p&gt;다음 글에서는 Python의 자료형과 자료구조에 대해 학습할 예정이다.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>휴고(Hugo)로 Github 블로그 만들기 (1)</title>
        <link>https://everimind4.github.io/p/%ED%9C%B4%EA%B3%A0hugo%EB%A1%9C-github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-1/</link>
        <pubDate>Sat, 20 Feb 2021 00:00:00 +0000</pubDate>
        
        <guid>https://everimind4.github.io/p/%ED%9C%B4%EA%B3%A0hugo%EB%A1%9C-github-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0-1/</guid>
        <description>&lt;h3 id=&#34;1-github-블로그&#34;&gt;1. Github 블로그&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot; 개발자라면 &lt;strong&gt;Github 블로그&lt;/strong&gt; 하나 정도는 있어야지! &amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;라는 말을 어디선가 주워듣고 Github로 블로그를 만들어보자, 결심하게 되었다.&lt;/p&gt;
&lt;p&gt;그런데 생각보다 진입장벽이 낮지는 않았고, 익숙해지는 데 생각보다 시간이 걸린 데다 시행착오도 제법 겪으며 결국 어찌저찌 성공은 하였다(그 결과물을 지금 보고 계십니다).&lt;/p&gt;
&lt;p&gt;그래서 관련 내용을 정리해서 포스팅하면 Hugo로 블로그를 만들어 Github로 호스팅하고자 하는 사람들이 조금이나마 도움을 받을 수 있을 듯 하여, 첫 포스팅 주제는 블로그를 만드는 방법으로 결정!&lt;/p&gt;
&lt;h3 id=&#34;2-준비물&#34;&gt;2. 준비물&lt;/h3&gt;
&lt;p&gt;각 항목 클릭 시 해당 설치 파일을 받을 수 있는 웹사이트로 링크 (OS에 맞는 최신 버전을 다운로드)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://git-scm.com/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/gohugoio/hugo/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://themes.gohugo.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Hugo theme&lt;/a&gt; (마음에 드는 테마 하나 선택)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://typora.io/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Typora&lt;/a&gt; (Markdown 에디터)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3-설치하기&#34;&gt;3. 설치하기&lt;/h3&gt;
&lt;h4 id=&#34;31-git-설치&#34;&gt;3.1. Git 설치&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Hugo blog만 사용하고자 하는 경우 설치 옵션 그대로 유지&lt;/li&gt;
&lt;li&gt;명령 프롬프트에 &lt;code&gt;git version&lt;/code&gt;를 입력하여 잘 설치되었는지 확인&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;32-github-repository-2개-만들기&#34;&gt;3.2. Github Repository &lt;strong&gt;2개&lt;/strong&gt; 만들기&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&#39;(Username).github.io&#39;&lt;/strong&gt; : 빌드 결과인 블로그 HTML 파일을 저장하는 Public Repository, &lt;strong&gt;이름 양식 필히 준수&lt;/strong&gt; (&lt;code&gt;everimind4.github.io&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Hugo blog 전체 파일을 관리하는 Private Repository, 이름 자유롭게 설정 (필자의 경우 &lt;code&gt;blog&lt;/code&gt;로 설정)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;33-로컬-디렉토리-생성-및-구성&#34;&gt;3.3. 로컬 디렉토리 생성 및 구성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;C:\Hugo\bin&lt;/strong&gt; 디렉토리 생성 후 다운로드한 Hugo Zip 파일 압축 해제&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Windows + Q ▶ 시스템 환경 변수 편집 ▶ &lt;strong&gt;PATH&lt;/strong&gt;에 &lt;strong&gt;C:\Hugo\bin&lt;/strong&gt; 추가&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Git Bash 실행 후 &lt;strong&gt;C:\Hugo&lt;/strong&gt; 위치에서 &lt;code&gt;$ hugo new site blog&lt;/code&gt; 명령으로 로컬 컨텐츠 디렉토리 생성&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C:\Hugo\blog&lt;/strong&gt;에서 &lt;code&gt;dir&lt;/code&gt; 명령으로 디렉토리 구조를 확인 가능&lt;/li&gt;
&lt;li&gt;이후, Git Bash 속성에서 시작 위치를 &lt;strong&gt;C:\Hugo\blog&lt;/strong&gt;로 설정하면 작업이 편해집니다!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;34-테마-다운로드-및-설정&#34;&gt;3.4. 테마 다운로드 및 설정&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;2번에서 고른 테마의 github 저장소 주소를 복사&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;~\blog&lt;/strong&gt; 경로에서 &lt;code&gt;$ git init&lt;/code&gt; 명령 실행 후 &lt;code&gt;$ git submodule add (복사한 주소) themes\(테마 이름)&lt;/code&gt; 명령으로 테마를 submodule로 추가&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt; 파일의 내용을 각 테마 Github 페이지의 예시 파일을 보면서 수정
&lt;ul&gt;
&lt;li&gt;toml이 아닌 yml/yaml 파일만 존재하는 경우 YAML to TOML converter 등을 사용&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;35-github-원격-저장소와-로컬-디렉토리-연결&#34;&gt;3.5. Github 원격 저장소와 로컬 디렉토리 연결&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Github에 만든 &lt;code&gt;blog&lt;/code&gt; 저장소(본인이 설정한 이름)와 &lt;strong&gt;C:\Hugo\blog&lt;/strong&gt; 디렉토리 연결
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C:\Hugo\blog&lt;/strong&gt;로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git init&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git remote add origin https://github.com/everimind4/blog.git&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;everimind4.github.io&lt;/code&gt; 저장소를 &lt;code&gt;blog&lt;/code&gt;의 submodule로 등록
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ git submodule add -b main https://github.com/everimind4/everimind4.github.io.git public&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;36-컨텐츠-생성&#34;&gt;3.6. 컨텐츠 생성&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ hugo new post/test.md&lt;/code&gt; 명령을 실행하면 &lt;code&gt;blog\content\post\&lt;/code&gt; 위치에 &lt;code&gt;test.md&lt;/code&gt; 파일이 생성됨&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Typora&lt;/strong&gt; 등의 Markdown Editor를 사용하여 md 파일 내용 작성 (자세한 방법을 다음 글에서 다룸)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ hugo server&lt;/code&gt; 또는 &lt;code&gt;hugo server -D&lt;/code&gt; 명령어로 웹서버 실행
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http://localhost:1313/&lt;/code&gt;에 접속해서 확인&lt;/li&gt;
&lt;li&gt;md 파일의 Draft 옵션이 true로 설정된 경우 빌드에서 제외됨&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-D&lt;/code&gt; 옵션은 md파일의 Draft 문서들도 확인 가능한 옵션 (다른 옵션은 &lt;a class=&#34;link&#34; href=&#34;https://gohugo.io/commands/hugo_server/#options&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;여기&lt;/a&gt;서 확인)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;37-컨텐츠-업로드&#34;&gt;3.7. 컨텐츠 업로드&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;C:\Hugo\blog&lt;/strong&gt;로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ hugo -t (테마이름)&lt;/code&gt; 명령으로 테마가 적용된 블로그 내용을 &lt;strong&gt;~\public&lt;/strong&gt;에 생성&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ cd public&lt;/code&gt; public 디렉토리로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git add .&lt;/code&gt; 수정된 파일 내역 저장&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git commit -m &amp;quot;(description)&amp;quot;&lt;/code&gt; 변경 내용 commit&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git push origin main&lt;/code&gt; everimind4.github.io에 커밋 내용 Push&lt;/li&gt;
&lt;li&gt;&lt;code&gt;blog&lt;/code&gt; 저장소에도 변경 내용 Push
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ cd ..&lt;/code&gt;  public의 한 단계 상위 디렉토리인 blog로 이동&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git add .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git commit -m &amp;quot;(description)&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$ git push origin main&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4-마무리하며&#34;&gt;4. 마무리하며&lt;/h3&gt;
&lt;p&gt;여기까지 따라왔다면 블로그에 글을 작성하고 빌드하여 블로그의 기초를 다지는 방법은 모두 배우셨습니다.&lt;/p&gt;
&lt;p&gt;이어지는 글들을 통해 아래 내용들을 다룰 예정입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;블로그 세부 설정
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt; 파일의 세부 내용을 수정하기&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Disquss&lt;/strong&gt; 등의 댓글 위젯 추가하기&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Google Analytics&lt;/strong&gt; 연동하기&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sitemap.xml&lt;/code&gt;을 추가해 검색 엔진에 노출시키기&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;마크다운 에디터 &lt;strong&gt;Typora&lt;/strong&gt;를 사용해 글쓰기
&lt;ul&gt;
&lt;li&gt;글 작성 Tips&lt;/li&gt;
&lt;li&gt;기본적인 문법 및 단축키&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        
    </channel>
</rss>
